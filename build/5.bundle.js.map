{"version":3,"sources":["webpack:///5.bundle.js","webpack:///./demo5/demo5.jsx","webpack:///./demo5/demo5.jsx?b0b1"],"names":["webpackJsonp",7,"module","exports","__webpack_require__","React","SetIntervalMixin","componentWillMount","this","intervals","setInterval","push","apply","arguments","componentWillUnmount","forEach","clearInterval","Timer","createClass","displayName","mixins","getInitialState","time","componentDidMount","tick","setState","state","render","createElement","document","getElementById",14],"mappings":"AAAAA,cAAc,IAERC;;;AAIA,SAASC,EAAQC,EAASC,GCNhC,GAAIC,GAAQD,cAAQ,GAUhBE,GAGFC,mBAAkB,WAChBC,KAAKC,cAKPC,YAAW,WACTF,KAAKC,UAAUE,KAAKD,YAAYE,MAAM,KAAMC,aAG9CC,qBAAoB,WAClBN,KAAKC,UAAUM,QAAQC,iBAIvBC,EAAAZ,EAAAa,aAA2BC,YAAA,QAE7BC,QAASd,GAETe,gBAAe,WACb,OACEC,KAAM,IAMVC,kBAAiB,WACff,KAAKE,YAAYF,KAAKgB,KAAM,MAG9BA,KAAI,WACFhB,KAAKiB,UAAUH,KAAMd,KAAKkB,MAAMJ,KAAO,KAGzCK,OAAM,WACJ,MAAOtB,GAAAuB,cAAA,MAAI,KAAC,SAAOpB,KAAKkB,MAAMJ,QAIlCjB,GAAMsB,OACJtB,EAAAuB,cAACX,EAAK,MACNY,SAASC,eAAe,eDcpBC;;;AAIA,SAAS7B,GEzEfA,EAAAC,QAAA","file":"5.bundle.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 7:\n/*!*************************!*\\\n  !*** ./demo5/demo5.jsx ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar React = __webpack_require__(/*! react */ 1);\n\t\n\t// While composition is the best technique for using components\n\t// together, sometimes it's desirable to have cross-cutting concerns\n\t// that are shared between multiple components. React uses mixins\n\t// to solve this problem.\n\t\n\t// A mixin is simply an object that defines certain component\n\t// lifecycle hooks and properties. Here's a mixin we'll use\n\t// to reimplement the Timer demo.\n\tvar SetIntervalMixin = {\n\t  // Many lifecycle hooks are automatically merged with the\n\t  // same hook defined in other mixins or the component itself.\n\t  componentWillMount:function() {\n\t    this.intervals = [];\n\t  },\n\t\n\t  // Mixins can also define other methods to make available\n\t  // to the component.\n\t  setInterval:function() {\n\t    this.intervals.push(setInterval.apply(null, arguments));\n\t  },\n\t\n\t  componentWillUnmount:function() {\n\t    this.intervals.forEach(clearInterval);\n\t  }\n\t};\n\t\n\tvar Timer = React.createClass({displayName: 'Timer',\n\t  // Use a mixin by adding it to the `mixins` array for a component.\n\t  mixins: [SetIntervalMixin],\n\t\n\t  getInitialState:function() {\n\t    return {\n\t      time: 0\n\t    };\n\t  },\n\t\n\t  // Now we can use the mixin to set the interval without worrying\n\t  // about setting our own `componentWillUnmount` hook.\n\t  componentDidMount:function() {\n\t    this.setInterval(this.tick, 1000);\n\t  },\n\t\n\t  tick:function() {\n\t    this.setState({time: this.state.time + 1});\n\t  },\n\t\n\t  render:function() {\n\t    return React.createElement(\"div\", null, \"Time: \", this.state.time);\n\t  }\n\t});\n\t\n\tReact.render(\n\t  React.createElement(Timer, null),\n\t  document.getElementById(\"container\")\n\t);\n\n\n/***/ },\n\n/***/ 14:\n/*!****************************************!*\\\n  !*** ./~/raw-loader!./demo5/demo5.jsx ***!\n  \\****************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = \"var React = require(\\\"react\\\");\\n\\n// While composition is the best technique for using components\\n// together, sometimes it's desirable to have cross-cutting concerns\\n// that are shared between multiple components. React uses mixins\\n// to solve this problem.\\n\\n// A mixin is simply an object that defines certain component\\n// lifecycle hooks and properties. Here's a mixin we'll use\\n// to reimplement the Timer demo.\\nvar SetIntervalMixin = {\\n  // Many lifecycle hooks are automatically merged with the\\n  // same hook defined in other mixins or the component itself.\\n  componentWillMount() {\\n    this.intervals = [];\\n  },\\n\\n  // Mixins can also define other methods to make available\\n  // to the component.\\n  setInterval() {\\n    this.intervals.push(setInterval.apply(null, arguments));\\n  },\\n\\n  componentWillUnmount() {\\n    this.intervals.forEach(clearInterval);\\n  }\\n};\\n\\nvar Timer = React.createClass({\\n  // Use a mixin by adding it to the `mixins` array for a component.\\n  mixins: [SetIntervalMixin],\\n\\n  getInitialState() {\\n    return {\\n      time: 0\\n    };\\n  },\\n\\n  // Now we can use the mixin to set the interval without worrying\\n  // about setting our own `componentWillUnmount` hook.\\n  componentDidMount() {\\n    this.setInterval(this.tick, 1000);\\n  },\\n\\n  tick() {\\n    this.setState({time: this.state.time + 1});\\n  },\\n\\n  render() {\\n    return <div>Time: {this.state.time}</div>;\\n  }\\n});\\n\\nReact.render(\\n  <Timer />,\\n  document.getElementById(\\\"container\\\")\\n);\\n\"\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 5.bundle.js\n **/","var React = require(\"react\");\n\n// While composition is the best technique for using components\n// together, sometimes it's desirable to have cross-cutting concerns\n// that are shared between multiple components. React uses mixins\n// to solve this problem.\n\n// A mixin is simply an object that defines certain component\n// lifecycle hooks and properties. Here's a mixin we'll use\n// to reimplement the Timer demo.\nvar SetIntervalMixin = {\n  // Many lifecycle hooks are automatically merged with the\n  // same hook defined in other mixins or the component itself.\n  componentWillMount() {\n    this.intervals = [];\n  },\n\n  // Mixins can also define other methods to make available\n  // to the component.\n  setInterval() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  },\n\n  componentWillUnmount() {\n    this.intervals.forEach(clearInterval);\n  }\n};\n\nvar Timer = React.createClass({\n  // Use a mixin by adding it to the `mixins` array for a component.\n  mixins: [SetIntervalMixin],\n\n  getInitialState() {\n    return {\n      time: 0\n    };\n  },\n\n  // Now we can use the mixin to set the interval without worrying\n  // about setting our own `componentWillUnmount` hook.\n  componentDidMount() {\n    this.setInterval(this.tick, 1000);\n  },\n\n  tick() {\n    this.setState({time: this.state.time + 1});\n  },\n\n  render() {\n    return <div>Time: {this.state.time}</div>;\n  }\n});\n\nReact.render(\n  <Timer />,\n  document.getElementById(\"container\")\n);\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo5/demo5.jsx\n **/","module.exports = \"var React = require(\\\"react\\\");\\n\\n// While composition is the best technique for using components\\n// together, sometimes it's desirable to have cross-cutting concerns\\n// that are shared between multiple components. React uses mixins\\n// to solve this problem.\\n\\n// A mixin is simply an object that defines certain component\\n// lifecycle hooks and properties. Here's a mixin we'll use\\n// to reimplement the Timer demo.\\nvar SetIntervalMixin = {\\n  // Many lifecycle hooks are automatically merged with the\\n  // same hook defined in other mixins or the component itself.\\n  componentWillMount() {\\n    this.intervals = [];\\n  },\\n\\n  // Mixins can also define other methods to make available\\n  // to the component.\\n  setInterval() {\\n    this.intervals.push(setInterval.apply(null, arguments));\\n  },\\n\\n  componentWillUnmount() {\\n    this.intervals.forEach(clearInterval);\\n  }\\n};\\n\\nvar Timer = React.createClass({\\n  // Use a mixin by adding it to the `mixins` array for a component.\\n  mixins: [SetIntervalMixin],\\n\\n  getInitialState() {\\n    return {\\n      time: 0\\n    };\\n  },\\n\\n  // Now we can use the mixin to set the interval without worrying\\n  // about setting our own `componentWillUnmount` hook.\\n  componentDidMount() {\\n    this.setInterval(this.tick, 1000);\\n  },\\n\\n  tick() {\\n    this.setState({time: this.state.time + 1});\\n  },\\n\\n  render() {\\n    return <div>Time: {this.state.time}</div>;\\n  }\\n});\\n\\nReact.render(\\n  <Timer />,\\n  document.getElementById(\\\"container\\\")\\n);\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/raw-loader!./demo5/demo5.jsx\n ** module id = 14\n ** module chunks = 5\n **/"],"sourceRoot":""}