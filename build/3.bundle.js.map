{"version":3,"sources":["webpack:///./demo3/demo3.jsx"],"names":[],"mappings":";;;;;;;;AAAA,KAAI,KAAK,GAAG,mBAAO,CAAC,cAAO,CAAC,CAAC;;AAE7B,KAAI,2BAA2B;AAC/B;AACA;AACA;;GAEE,eAAe,YAAG,CAAC;KACjB,OAAO;OACL,IAAI,EAAE,CAAC;MACR,CAAC;AACN,IAAG;AACH;AACA;AACA;;GAEE,iBAAiB,YAAG,CAAC;KACnB,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC9C,IAAG;AACH;AACA;AACA;;GAEE,oBAAoB,YAAG,CAAC;KACtB,IAAI,CAAC,KAAK,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC5C,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAE,IAAI,YAAG,CAAC;AACV;AACA;AACA;AACA;;KAEI,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/C,IAAG;AACH;AACA;AACA;;GAEE,MAAM,YAAG,CAAC;KACR,OAAO,yBAAI,MAAC,YAAO,IAAI,CAAC,KAAK,CAAC,IAAW,EAAC;IAC3C;AACH,EAAC,CAAC,CAAC;;AAEH,MAAK,CAAC,MAAM;GACV,oBAAC,KAAK,OAAG;GACT,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC;EACrC,CAAC","sourcesContent":["var React = require(\"react\");\n\nvar Timer = React.createClass({\n  // In addition to properties passed from parents, React\n  // components can also contain an internal state, referenced\n  // by `this.state`. `getInitialState` defines the value of\n  // `this.state` when the component is first mounted.\n  getInitialState() {\n    return {\n      time: 0\n    };\n  },\n\n  // React provides lifecycle hooks to set up and tear\n  // down components and third-party APIs if necessary.\n  // Here, we start a timer when the component mounts...\n  componentDidMount() {\n    this.timer = setInterval(this.tick, 1000);\n  },\n\n  // ... and remove the timer when the component unmounts.\n  // If we don't do this, we'll leak memory (and the timer\n  // will continue to fire).\n  componentWillUnmount() {\n    this.timer && clearInterval(this.timer);\n  },\n\n  // Unlike properties, state is owned by the component, and\n  // can be changed using a few methods. Note that you should\n  // *never* modify `this.state` directly--always use an API\n  // method to mutate the state.\n  //\n  // Our timer calls `setState`, which allows us to update one or\n  // more keys in our state. The object passed to `setState` is\n  // merged with the current state; we can use `replaceState` instead\n  // if we don't want to merge.\n  tick() {\n    // Note that React auto-binds all top-level methods in the\n    // object passed to `createClass` to the component instance.\n    // Because of this, `this` inside the `tick` method is\n    // automatically the component instance, and we didn't have\n    // to use `this.tick.bind(this)` inside the `setInterval` call.\n    this.setState({time: this.state.time + 1});\n  },\n\n  // Render is called automatically when a component's state is\n  // updated with `setState`, `replaceState`, or when `forceUpdate`\n  // is called. Composed components are automatically re-rendered.\n  render() {\n    return <div>Time: {this.state.time}</div>;\n  }\n});\n\nReact.render(\n  <Timer />,\n  document.getElementById(\"container\")\n);\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo3/demo3.jsx\n **/"],"sourceRoot":"","file":"3.bundle.js"}