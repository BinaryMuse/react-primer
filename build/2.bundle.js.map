{"version":3,"sources":["webpack:///2.bundle.js","webpack:///./demo2/demo2.jsx","webpack:///./demo2/demo2.jsx?e438"],"names":["webpackJsonp",4,"module","exports","__webpack_require__","React","HelloComponent","createClass","displayName","render","createElement","this","props","name","document","getElementById",11],"mappings":"AAAAA,cAAc,IAERC;;;AAIA,SAASC,EAAQC,EAASC,GCJhC,GAAIC,GAAQD,cAAQ,GAMhBE,EAAAD,EAAAE,aAAoCC,YAAA,iBAGtCC,OAAM,WAGJ,MAAOJ,GAAAK,cAAA,MAAI,KAAC,SAAOC,KAAKC,MAAMC,KAAKR,EAAAK,cAAA,SAAO,KAAC,QAI/CL,GAAMI,OAEJJ,EAAAK,cAACJ,GAAcO,KAAC,YAChBC,SAASC,eAAe,eDkBpBC;;;AAIA,SAASd,GE3CfA,EAAAC,QAAA","file":"2.bundle.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 4:\n/*!*************************!*\\\n  !*** ./demo2/demo2.jsx ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t// JSX is an XML-like syntax that simplifies composing React components.\n\t\n\tvar React = __webpack_require__(/*! react */ 1);\n\t\n\t// When using JSX, you don't have to worry about creating\n\t// ReactElements or factories to generate them. JSX handles\n\t// all these details for you. This demo is functionally\n\t// identical to Demo 1.\n\tvar HelloComponent = React.createClass({displayName: 'HelloComponent',\n\t  // The JSX transpiler also supports (optional) ES6 features,\n\t  // such as concise method syntax, which we're using here.\n\t  render:function() {\n\t    // Children are composed just like child XML/HTML nodes.\n\t    // `{...}` can be used to interpolate raw JavaScript.\n\t    return React.createElement(\"div\", null, \"Hello \", this.props.name, React.createElement(\"strong\", null, \"!\"));\n\t  }\n\t});\n\t\n\tReact.render(\n\t  // Properties look like HTML attributes.\n\t  React.createElement(HelloComponent, {name: \"Minerva\"}),\n\t  document.getElementById(\"container\")\n\t);\n\t\n\t// It's worth noting that JSX assumes all calls with a\n\t// <lowercaseInitialLetter> refers to an actual HTML element,\n\t// and all custom components must have an <UppercaseInitialLetter>.\n\n\n/***/ },\n\n/***/ 11:\n/*!****************************************!*\\\n  !*** ./~/raw-loader!./demo2/demo2.jsx ***!\n  \\****************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = \"// JSX is an XML-like syntax that simplifies composing React components.\\n\\nvar React = require(\\\"react\\\");\\n\\n// When using JSX, you don't have to worry about creating\\n// ReactElements or factories to generate them. JSX handles\\n// all these details for you. This demo is functionally\\n// identical to Demo 1.\\nvar HelloComponent = React.createClass({\\n  // The JSX transpiler also supports (optional) ES6 features,\\n  // such as concise method syntax, which we're using here.\\n  render() {\\n    // Children are composed just like child XML/HTML nodes.\\n    // `{...}` can be used to interpolate raw JavaScript.\\n    return <div>Hello {this.props.name}<strong>!</strong></div>;\\n  }\\n});\\n\\nReact.render(\\n  // Properties look like HTML attributes.\\n  <HelloComponent name=\\\"Minerva\\\" />,\\n  document.getElementById(\\\"container\\\")\\n);\\n\\n// It's worth noting that JSX assumes all calls with a\\n// <lowercaseInitialLetter> refers to an actual HTML element,\\n// and all custom components must have an <UppercaseInitialLetter>.\\n\"\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 2.bundle.js\n **/","// JSX is an XML-like syntax that simplifies composing React components.\n\nvar React = require(\"react\");\n\n// When using JSX, you don't have to worry about creating\n// ReactElements or factories to generate them. JSX handles\n// all these details for you. This demo is functionally\n// identical to Demo 1.\nvar HelloComponent = React.createClass({\n  // The JSX transpiler also supports (optional) ES6 features,\n  // such as concise method syntax, which we're using here.\n  render() {\n    // Children are composed just like child XML/HTML nodes.\n    // `{...}` can be used to interpolate raw JavaScript.\n    return <div>Hello {this.props.name}<strong>!</strong></div>;\n  }\n});\n\nReact.render(\n  // Properties look like HTML attributes.\n  <HelloComponent name=\"Minerva\" />,\n  document.getElementById(\"container\")\n);\n\n// It's worth noting that JSX assumes all calls with a\n// <lowercaseInitialLetter> refers to an actual HTML element,\n// and all custom components must have an <UppercaseInitialLetter>.\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo2/demo2.jsx\n **/","module.exports = \"// JSX is an XML-like syntax that simplifies composing React components.\\n\\nvar React = require(\\\"react\\\");\\n\\n// When using JSX, you don't have to worry about creating\\n// ReactElements or factories to generate them. JSX handles\\n// all these details for you. This demo is functionally\\n// identical to Demo 1.\\nvar HelloComponent = React.createClass({\\n  // The JSX transpiler also supports (optional) ES6 features,\\n  // such as concise method syntax, which we're using here.\\n  render() {\\n    // Children are composed just like child XML/HTML nodes.\\n    // `{...}` can be used to interpolate raw JavaScript.\\n    return <div>Hello {this.props.name}<strong>!</strong></div>;\\n  }\\n});\\n\\nReact.render(\\n  // Properties look like HTML attributes.\\n  <HelloComponent name=\\\"Minerva\\\" />,\\n  document.getElementById(\\\"container\\\")\\n);\\n\\n// It's worth noting that JSX assumes all calls with a\\n// <lowercaseInitialLetter> refers to an actual HTML element,\\n// and all custom components must have an <UppercaseInitialLetter>.\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/raw-loader!./demo2/demo2.jsx\n ** module id = 11\n ** module chunks = 2\n **/"],"sourceRoot":""}