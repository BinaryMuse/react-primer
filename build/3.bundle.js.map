{"version":3,"sources":["webpack:///3.bundle.js","webpack:///./demo3/demo3.jsx","webpack:///./demo3/demo3.jsx?1559"],"names":["webpackJsonp",5,"module","exports","__webpack_require__","React","Timer","createClass","displayName","getInitialState","time","componentDidMount","this","timer","setInterval","tick","componentWillUnmount","clearInterval","setState","state","render","createElement","document","getElementById",12],"mappings":"AAAAA,cAAc,IAERC;;;AAIA,SAASC,EAAQC,EAASC,GCNhC,GAAIC,GAAQD,cAAQ,GAEhBE,EAAAD,EAAAE,aAA2BC,YAAA,QAK7BC,gBAAe,WACb,OACEC,KAAM,IAOVC,kBAAiB,WACfC,KAAKC,MAAQC,YAAYF,KAAKG,KAAM,MAMtCC,qBAAoB,WAClBJ,KAAKC,OAASI,cAAcL,KAAKC,QAYnCE,KAAI,WAMFH,KAAKM,UAAUR,KAAME,KAAKO,MAAMT,KAAO,KAMzCU,OAAM,WACJ,MAAOf,GAAAgB,cAAA,MAAI,KAAC,SAAOT,KAAKO,MAAMT,QAIlCL,GAAMe,OACJf,EAAAgB,cAACf,EAAK,MACNgB,SAASC,eAAe,eDcpBC;;;AAIA,SAAStB,GEzEfA,EAAAC,QAAA","file":"3.bundle.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 5:\n/*!*************************!*\\\n  !*** ./demo3/demo3.jsx ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar React = __webpack_require__(/*! react */ 1);\n\t\n\tvar Timer = React.createClass({displayName: 'Timer',\n\t  // In addition to properties passed from parents, React\n\t  // components can also contain an internal state, referenced\n\t  // by `this.state`. `getInitialState` defines the value of\n\t  // `this.state` when the component is first mounted.\n\t  getInitialState:function() {\n\t    return {\n\t      time: 0\n\t    };\n\t  },\n\t\n\t  // React provides lifecycle hooks to set up and tear\n\t  // down components and third-party APIs if necessary.\n\t  // Here, we start a timer when the component mounts...\n\t  componentDidMount:function() {\n\t    this.timer = setInterval(this.tick, 1000);\n\t  },\n\t\n\t  // ... and remove the timer when the component unmounts.\n\t  // If we don't do this, we'll leak memory (and the timer\n\t  // will continue to fire).\n\t  componentWillUnmount:function() {\n\t    this.timer && clearInterval(this.timer);\n\t  },\n\t\n\t  // Unlike properties, state is owned by the component, and\n\t  // can be changed using a few methods. Note that you should\n\t  // *never* modify `this.state` directly--always use an API\n\t  // method to mutate the state.\n\t  //\n\t  // Our timer calls `setState`, which allows us to update one or\n\t  // more keys in our state. The object passed to `setState` is\n\t  // merged with the current state; we can use `replaceState` instead\n\t  // if we don't want to merge.\n\t  tick:function() {\n\t    // Note that React auto-binds all top-level methods in the\n\t    // object passed to `createClass` to the component instance.\n\t    // Because of this, `this` inside the `tick` method is\n\t    // automatically the component instance, and we didn't have\n\t    // to use `this.tick.bind(this)` inside the `setInterval` call.\n\t    this.setState({time: this.state.time + 1});\n\t  },\n\t\n\t  // Render is called automatically when a component's state is\n\t  // updated with `setState`, `replaceState`, or when `forceUpdate`\n\t  // is called. Composed components are automatically re-rendered.\n\t  render:function() {\n\t    return React.createElement(\"div\", null, \"Time: \", this.state.time);\n\t  }\n\t});\n\t\n\tReact.render(\n\t  React.createElement(Timer, null),\n\t  document.getElementById(\"container\")\n\t);\n\n\n/***/ },\n\n/***/ 12:\n/*!****************************************!*\\\n  !*** ./~/raw-loader!./demo3/demo3.jsx ***!\n  \\****************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = \"var React = require(\\\"react\\\");\\n\\nvar Timer = React.createClass({\\n  // In addition to properties passed from parents, React\\n  // components can also contain an internal state, referenced\\n  // by `this.state`. `getInitialState` defines the value of\\n  // `this.state` when the component is first mounted.\\n  getInitialState() {\\n    return {\\n      time: 0\\n    };\\n  },\\n\\n  // React provides lifecycle hooks to set up and tear\\n  // down components and third-party APIs if necessary.\\n  // Here, we start a timer when the component mounts...\\n  componentDidMount() {\\n    this.timer = setInterval(this.tick, 1000);\\n  },\\n\\n  // ... and remove the timer when the component unmounts.\\n  // If we don't do this, we'll leak memory (and the timer\\n  // will continue to fire).\\n  componentWillUnmount() {\\n    this.timer && clearInterval(this.timer);\\n  },\\n\\n  // Unlike properties, state is owned by the component, and\\n  // can be changed using a few methods. Note that you should\\n  // *never* modify `this.state` directly--always use an API\\n  // method to mutate the state.\\n  //\\n  // Our timer calls `setState`, which allows us to update one or\\n  // more keys in our state. The object passed to `setState` is\\n  // merged with the current state; we can use `replaceState` instead\\n  // if we don't want to merge.\\n  tick() {\\n    // Note that React auto-binds all top-level methods in the\\n    // object passed to `createClass` to the component instance.\\n    // Because of this, `this` inside the `tick` method is\\n    // automatically the component instance, and we didn't have\\n    // to use `this.tick.bind(this)` inside the `setInterval` call.\\n    this.setState({time: this.state.time + 1});\\n  },\\n\\n  // Render is called automatically when a component's state is\\n  // updated with `setState`, `replaceState`, or when `forceUpdate`\\n  // is called. Composed components are automatically re-rendered.\\n  render() {\\n    return <div>Time: {this.state.time}</div>;\\n  }\\n});\\n\\nReact.render(\\n  <Timer />,\\n  document.getElementById(\\\"container\\\")\\n);\\n\"\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 3.bundle.js\n **/","var React = require(\"react\");\n\nvar Timer = React.createClass({\n  // In addition to properties passed from parents, React\n  // components can also contain an internal state, referenced\n  // by `this.state`. `getInitialState` defines the value of\n  // `this.state` when the component is first mounted.\n  getInitialState() {\n    return {\n      time: 0\n    };\n  },\n\n  // React provides lifecycle hooks to set up and tear\n  // down components and third-party APIs if necessary.\n  // Here, we start a timer when the component mounts...\n  componentDidMount() {\n    this.timer = setInterval(this.tick, 1000);\n  },\n\n  // ... and remove the timer when the component unmounts.\n  // If we don't do this, we'll leak memory (and the timer\n  // will continue to fire).\n  componentWillUnmount() {\n    this.timer && clearInterval(this.timer);\n  },\n\n  // Unlike properties, state is owned by the component, and\n  // can be changed using a few methods. Note that you should\n  // *never* modify `this.state` directly--always use an API\n  // method to mutate the state.\n  //\n  // Our timer calls `setState`, which allows us to update one or\n  // more keys in our state. The object passed to `setState` is\n  // merged with the current state; we can use `replaceState` instead\n  // if we don't want to merge.\n  tick() {\n    // Note that React auto-binds all top-level methods in the\n    // object passed to `createClass` to the component instance.\n    // Because of this, `this` inside the `tick` method is\n    // automatically the component instance, and we didn't have\n    // to use `this.tick.bind(this)` inside the `setInterval` call.\n    this.setState({time: this.state.time + 1});\n  },\n\n  // Render is called automatically when a component's state is\n  // updated with `setState`, `replaceState`, or when `forceUpdate`\n  // is called. Composed components are automatically re-rendered.\n  render() {\n    return <div>Time: {this.state.time}</div>;\n  }\n});\n\nReact.render(\n  <Timer />,\n  document.getElementById(\"container\")\n);\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo3/demo3.jsx\n **/","module.exports = \"var React = require(\\\"react\\\");\\n\\nvar Timer = React.createClass({\\n  // In addition to properties passed from parents, React\\n  // components can also contain an internal state, referenced\\n  // by `this.state`. `getInitialState` defines the value of\\n  // `this.state` when the component is first mounted.\\n  getInitialState() {\\n    return {\\n      time: 0\\n    };\\n  },\\n\\n  // React provides lifecycle hooks to set up and tear\\n  // down components and third-party APIs if necessary.\\n  // Here, we start a timer when the component mounts...\\n  componentDidMount() {\\n    this.timer = setInterval(this.tick, 1000);\\n  },\\n\\n  // ... and remove the timer when the component unmounts.\\n  // If we don't do this, we'll leak memory (and the timer\\n  // will continue to fire).\\n  componentWillUnmount() {\\n    this.timer && clearInterval(this.timer);\\n  },\\n\\n  // Unlike properties, state is owned by the component, and\\n  // can be changed using a few methods. Note that you should\\n  // *never* modify `this.state` directly--always use an API\\n  // method to mutate the state.\\n  //\\n  // Our timer calls `setState`, which allows us to update one or\\n  // more keys in our state. The object passed to `setState` is\\n  // merged with the current state; we can use `replaceState` instead\\n  // if we don't want to merge.\\n  tick() {\\n    // Note that React auto-binds all top-level methods in the\\n    // object passed to `createClass` to the component instance.\\n    // Because of this, `this` inside the `tick` method is\\n    // automatically the component instance, and we didn't have\\n    // to use `this.tick.bind(this)` inside the `setInterval` call.\\n    this.setState({time: this.state.time + 1});\\n  },\\n\\n  // Render is called automatically when a component's state is\\n  // updated with `setState`, `replaceState`, or when `forceUpdate`\\n  // is called. Composed components are automatically re-rendered.\\n  render() {\\n    return <div>Time: {this.state.time}</div>;\\n  }\\n});\\n\\nReact.render(\\n  <Timer />,\\n  document.getElementById(\\\"container\\\")\\n);\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/raw-loader!./demo3/demo3.jsx\n ** module id = 12\n ** module chunks = 3\n **/"],"sourceRoot":""}