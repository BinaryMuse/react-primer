{"version":3,"sources":["webpack:///7.bundle.js","webpack:///./demo7/demo7.jsx"],"names":["webpackJsonp",9,"module","exports","__webpack_require__","React","CodeListing","createClass","displayName","propTypes","filename","PropTypes","string","getDefaultProps","render","filenameStyle","backgroundColor","color","padding","fontFamily","DOM","div","style","border","this","props","pre","margin","children","Application","code","join","p","renderComponent","document","getElementById"],"mappings":"AAAAA,cAAc,IAERC;;;AAIA,SAASC,EAAQC,EAASC,GCJhC,GAAAC,GAAAD,cAAA,GAkBAE,EAAAD,EAAAE,aAAqCC,YAAA,cACrCC,WACAC,SAAAL,EAAAM,UAAAC,QAGAC,gBAAA,WACA,OACAH,SAAA,iBAIAI,OAAA,WACA,GAAAC,IACAC,gBAAA,QACAC,MAAA,QACAC,QAAA,EACAC,WAAA,YAGA,OACAd,GAAAe,IAAAC,KAAqBC,OAAQC,OAAA,oBAC7BlB,EAAAe,IAAAC,KAAuBC,MAAAP,GAAqBS,KAAAC,MAAAf,UAC5CL,EAAAe,IAAAM,KAAuBJ,OAAQK,OAAA,IAAWH,KAAAC,MAAAG,cAM1CC,EAAAxB,EAAAE,aAAqCC,YAAA,cACrCM,OAAA,WACA,GAAAgB,IACA,yBACA,4DACA,4CACA,8BACA,yCACA,MACAC,KAAA,KAKA,OACA1B,GAAAe,IAAAC,IAAA,KACAhB,EAAAe,IAAAY,EAAA,2BACA1B,GAAqBI,SAAA,cAAuBoB,GAC5CzB,EAAAe,IAAAY,EAAA,uBACA1B,EAAA,mDAMAD,GAAA4B,gBACAJ,EAAA,MACAK,SAAAC,eAAA","file":"7.bundle.js","sourcesContent":["webpackJsonp([7],{\n\n/***/ 9:\n/*!*************************!*\\\n  !*** ./demo7/demo7.jsx ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @jsx React.DOM */\n\t\n\tvar React = __webpack_require__(/*! react */ 1);\n\t\n\t// Sometimes it's useful have a component that can\n\t// wrap other arbitrary components. React provides\n\t// `this.props.children` for this purpose.\n\t//\n\t// For example, given the following JSX:\n\t//\n\t//   <Component>Inner <strong>text</strong></Component>\n\t//\n\t// Inside `Component`, `this.props.children` provides:\n\t//\n\t//   Inner <strong>text</strong>\n\t//\n\t// In this example, we'll create a component that provides\n\t// a code listing with preformatted text and a label for\n\t// the filename.\n\t\n\tvar CodeListing = React.createClass({displayName: 'CodeListing',\n\t  propTypes: {\n\t    filename: React.PropTypes.string\n\t  },\n\t\n\t  getDefaultProps: function() {\n\t    return {\n\t      filename: \"unnamed file\"\n\t    };\n\t  },\n\t\n\t  render: function() {\n\t    var filenameStyle = {\n\t      backgroundColor: \"black\",\n\t      color: \"white\",\n\t      padding: 5,\n\t      fontFamily: \"monospace\"\n\t    };\n\t\n\t    return (\n\t      React.DOM.div({style: {border: \"1px solid black\"}}, \n\t        React.DOM.div({style: filenameStyle}, this.props.filename), \n\t        React.DOM.pre({style: {margin: 5}}, this.props.children)\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tvar Application = React.createClass({displayName: 'Application',\n\t  render: function() {\n\t      var code = [\n\t        'React.renderComponent(',\n\t        '  // We pass `\"Minerva\"` as the `name` property, which is',\n\t        '  // used in `Hello`\\'s `render` function.',\n\t        '  Hello({name: \"Minerva\"}),',\n\t        '  document.getElementById(\"container\")',\n\t        ');'\n\t      ].join(\"\\n\");\n\t\n\t    // We simply wrap whatever we want to show up in the code listing\n\t    // in a `<CodeListing>` component, and it's provided as\n\t    // `this.props.children` in the `CodeListing` component.\n\t    return (\n\t      React.DOM.div(null, \n\t        React.DOM.p(null, \"Here is some code:\"), \n\t        CodeListing({filename: \"simple.jsx\"}, code), \n\t        React.DOM.p(null, \"And some more:\"), \n\t        CodeListing(null, \"CodeListing with no \\\"filename\\\" property\")\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tReact.renderComponent(\n\t  Application(null),\n\t  document.getElementById(\"container\")\n\t);\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 7.bundle.js\n **/","/** @jsx React.DOM */\n\nvar React = require(\"react\");\n\n// Sometimes it's useful have a component that can\n// wrap other arbitrary components. React provides\n// `this.props.children` for this purpose.\n//\n// For example, given the following JSX:\n//\n//   <Component>Inner <strong>text</strong></Component>\n//\n// Inside `Component`, `this.props.children` provides:\n//\n//   Inner <strong>text</strong>\n//\n// In this example, we'll create a component that provides\n// a code listing with preformatted text and a label for\n// the filename.\n\nvar CodeListing = React.createClass({displayName: 'CodeListing',\n  propTypes: {\n    filename: React.PropTypes.string\n  },\n\n  getDefaultProps: function() {\n    return {\n      filename: \"unnamed file\"\n    };\n  },\n\n  render: function() {\n    var filenameStyle = {\n      backgroundColor: \"black\",\n      color: \"white\",\n      padding: 5,\n      fontFamily: \"monospace\"\n    };\n\n    return (\n      React.DOM.div({style: {border: \"1px solid black\"}}, \n        React.DOM.div({style: filenameStyle}, this.props.filename), \n        React.DOM.pre({style: {margin: 5}}, this.props.children)\n      )\n    );\n  }\n});\n\nvar Application = React.createClass({displayName: 'Application',\n  render: function() {\n      var code = [\n        'React.renderComponent(',\n        '  // We pass `\"Minerva\"` as the `name` property, which is',\n        '  // used in `Hello`\\'s `render` function.',\n        '  Hello({name: \"Minerva\"}),',\n        '  document.getElementById(\"container\")',\n        ');'\n      ].join(\"\\n\");\n\n    // We simply wrap whatever we want to show up in the code listing\n    // in a `<CodeListing>` component, and it's provided as\n    // `this.props.children` in the `CodeListing` component.\n    return (\n      React.DOM.div(null, \n        React.DOM.p(null, \"Here is some code:\"), \n        CodeListing({filename: \"simple.jsx\"}, code), \n        React.DOM.p(null, \"And some more:\"), \n        CodeListing(null, \"CodeListing with no \\\"filename\\\" property\")\n      )\n    );\n  }\n});\n\nReact.renderComponent(\n  Application(null),\n  document.getElementById(\"container\")\n);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo7/demo7.jsx\n ** module id = 9\n ** module chunks = 7\n **/"],"sourceRoot":""}