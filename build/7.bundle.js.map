{"version":3,"sources":["webpack:///7.bundle.js","webpack:///./demo7/demo7.jsx","webpack:///./demo7/demo7.jsx?39ff"],"names":["webpackJsonp",9,"module","exports","__webpack_require__","React","CodeListing","createClass","displayName","propTypes","filename","PropTypes","string","getDefaultProps","render","filenameStyle","backgroundColor","color","padding","fontFamily","createElement","style","border","this","props","margin","children","Application","code","join","document","getElementById",18],"mappings":"AAAAA,cAAc,IAERC;;;AAIA,SAASC,EAAQC,EAASC,GCNhC,GAAIC,GAAQD,cAAQ,GAkBhBE,EAAAD,EAAAE,aAAiCC,YAAA,cACnCC,WACEC,SAAUL,EAAMM,UAAUC,QAG5BC,gBAAe,WACb,OACEH,SAAU,iBAIdI,OAAM,WACJ,GAAIC,IACFC,gBAAiB,QACjBC,MAAO,QACPC,QAAS,EACTC,WAAY,YAGd,OACEd,GAAAe,cAAA,OAAIC,OAAMC,OAAS,oBACjBjB,EAAAe,cAAA,OAAIC,MAACN,GAAsBQ,KAACC,MAAKd,UACjCL,EAAAe,cAAA,OAAIC,OAAMI,OAAS,IAAMF,KAACC,MAAKE,cAMnCC,EAAAtB,EAAAE,aAAiCC,YAAA,cACnCM,OAAM,WACF,GAAIc,IACF,gBACA,4DACA,qDACA,4CACA,yCACA,MACAC,KAAK,KAKT,OACExB,GAAAe,cAAA,MAAI,KACFf,EAAAe,cAAA,IAAE,KAAC,sBACHf,EAAAe,cAACd,GAAWI,SAAC,cAAsBkB,GACnCvB,EAAAe,cAAA,IAAE,KAAC,kBACHf,EAAAe,cAACd,EAAW,KAAC,8CAMrBD,GAAMS,OACJT,EAAAe,cAACO,EAAW,MACZG,SAASC,eAAe,eDcpBC;;;AAIA,SAAS9B,GE3FfA,EAAAC,QAAA","file":"7.bundle.js","sourcesContent":["webpackJsonp([7],{\n\n/***/ 9:\n/*!*************************!*\\\n  !*** ./demo7/demo7.jsx ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar React = __webpack_require__(/*! react */ 1);\n\t\n\t// Sometimes it's useful have a component that can\n\t// wrap other arbitrary ReactElements. React provides\n\t// `this.props.children` for this purpose.\n\t//\n\t// For example, given the following JSX:\n\t//\n\t//   <Component>Inner <strong>text</strong></Component>\n\t//\n\t// Inside `Component`, `this.props.children` provides:\n\t//\n\t//   Inner <strong>text</strong>\n\t//\n\t// In this example, we'll create a component that provides\n\t// a code listing with preformatted text and a label for\n\t// the filename.\n\t\n\tvar CodeListing = React.createClass({displayName: 'CodeListing',\n\t  propTypes: {\n\t    filename: React.PropTypes.string\n\t  },\n\t\n\t  getDefaultProps:function() {\n\t    return {\n\t      filename: \"unnamed file\"\n\t    };\n\t  },\n\t\n\t  render:function() {\n\t    var filenameStyle = {\n\t      backgroundColor: \"black\",\n\t      color: \"white\",\n\t      padding: 5,\n\t      fontFamily: \"monospace\"\n\t    };\n\t\n\t    return (\n\t      React.createElement(\"div\", {style: {border: \"1px solid black\"}}, \n\t        React.createElement(\"div\", {style: filenameStyle}, this.props.filename), \n\t        React.createElement(\"pre\", {style: {margin: 5}}, this.props.children)\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tvar Application = React.createClass({displayName: 'Application',\n\t  render:function() {\n\t      var code = [\n\t        'React.render(',\n\t        '  // We pass `\"Minerva\"` as the `name` property, which is',\n\t        '  // used in `HelloComponent`\\'s `render` function.',\n\t        '  HelloElementFactory({name: \"Minerva\"}),',\n\t        '  document.getElementById(\"container\")',\n\t        ');'\n\t      ].join(\"\\n\");\n\t\n\t    // We simply wrap whatever we want to show up in the code listing\n\t    // in a `<CodeListing>` element, and it's provided as\n\t    // `this.props.children` in the `CodeListing` component.\n\t    return (\n\t      React.createElement(\"div\", null, \n\t        React.createElement(\"p\", null, \"Here is some code:\"), \n\t        React.createElement(CodeListing, {filename: \"simple.jsx\"}, code), \n\t        React.createElement(\"p\", null, \"And some more:\"), \n\t        React.createElement(CodeListing, null, \"CodeListing with no \\\"filename\\\" property\")\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tReact.render(\n\t  React.createElement(Application, null),\n\t  document.getElementById(\"container\")\n\t);\n\n\n/***/ },\n\n/***/ 18:\n/*!****************************************!*\\\n  !*** ./~/raw-loader!./demo7/demo7.jsx ***!\n  \\****************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = \"var React = require(\\\"react\\\");\\n\\n// Sometimes it's useful have a component that can\\n// wrap other arbitrary ReactElements. React provides\\n// `this.props.children` for this purpose.\\n//\\n// For example, given the following JSX:\\n//\\n//   <Component>Inner <strong>text</strong></Component>\\n//\\n// Inside `Component`, `this.props.children` provides:\\n//\\n//   Inner <strong>text</strong>\\n//\\n// In this example, we'll create a component that provides\\n// a code listing with preformatted text and a label for\\n// the filename.\\n\\nvar CodeListing = React.createClass({\\n  propTypes: {\\n    filename: React.PropTypes.string\\n  },\\n\\n  getDefaultProps() {\\n    return {\\n      filename: \\\"unnamed file\\\"\\n    };\\n  },\\n\\n  render() {\\n    var filenameStyle = {\\n      backgroundColor: \\\"black\\\",\\n      color: \\\"white\\\",\\n      padding: 5,\\n      fontFamily: \\\"monospace\\\"\\n    };\\n\\n    return (\\n      <div style={{border: \\\"1px solid black\\\"}}>\\n        <div style={filenameStyle}>{this.props.filename}</div>\\n        <pre style={{margin: 5}}>{this.props.children}</pre>\\n      </div>\\n    );\\n  }\\n});\\n\\nvar Application = React.createClass({\\n  render() {\\n      var code = [\\n        'React.render(',\\n        '  // We pass `\\\"Minerva\\\"` as the `name` property, which is',\\n        '  // used in `HelloComponent`\\\\'s `render` function.',\\n        '  HelloElementFactory({name: \\\"Minerva\\\"}),',\\n        '  document.getElementById(\\\"container\\\")',\\n        ');'\\n      ].join(\\\"\\\\n\\\");\\n\\n    // We simply wrap whatever we want to show up in the code listing\\n    // in a `<CodeListing>` element, and it's provided as\\n    // `this.props.children` in the `CodeListing` component.\\n    return (\\n      <div>\\n        <p>Here is some code:</p>\\n        <CodeListing filename=\\\"simple.jsx\\\">{code}</CodeListing>\\n        <p>And some more:</p>\\n        <CodeListing>CodeListing with no \\\"filename\\\" property</CodeListing>\\n      </div>\\n    );\\n  }\\n});\\n\\nReact.render(\\n  <Application />,\\n  document.getElementById(\\\"container\\\")\\n);\\n\"\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 7.bundle.js\n **/","var React = require(\"react\");\n\n// Sometimes it's useful have a component that can\n// wrap other arbitrary ReactElements. React provides\n// `this.props.children` for this purpose.\n//\n// For example, given the following JSX:\n//\n//   <Component>Inner <strong>text</strong></Component>\n//\n// Inside `Component`, `this.props.children` provides:\n//\n//   Inner <strong>text</strong>\n//\n// In this example, we'll create a component that provides\n// a code listing with preformatted text and a label for\n// the filename.\n\nvar CodeListing = React.createClass({\n  propTypes: {\n    filename: React.PropTypes.string\n  },\n\n  getDefaultProps() {\n    return {\n      filename: \"unnamed file\"\n    };\n  },\n\n  render() {\n    var filenameStyle = {\n      backgroundColor: \"black\",\n      color: \"white\",\n      padding: 5,\n      fontFamily: \"monospace\"\n    };\n\n    return (\n      <div style={{border: \"1px solid black\"}}>\n        <div style={filenameStyle}>{this.props.filename}</div>\n        <pre style={{margin: 5}}>{this.props.children}</pre>\n      </div>\n    );\n  }\n});\n\nvar Application = React.createClass({\n  render() {\n      var code = [\n        'React.render(',\n        '  // We pass `\"Minerva\"` as the `name` property, which is',\n        '  // used in `HelloComponent`\\'s `render` function.',\n        '  HelloElementFactory({name: \"Minerva\"}),',\n        '  document.getElementById(\"container\")',\n        ');'\n      ].join(\"\\n\");\n\n    // We simply wrap whatever we want to show up in the code listing\n    // in a `<CodeListing>` element, and it's provided as\n    // `this.props.children` in the `CodeListing` component.\n    return (\n      <div>\n        <p>Here is some code:</p>\n        <CodeListing filename=\"simple.jsx\">{code}</CodeListing>\n        <p>And some more:</p>\n        <CodeListing>CodeListing with no \"filename\" property</CodeListing>\n      </div>\n    );\n  }\n});\n\nReact.render(\n  <Application />,\n  document.getElementById(\"container\")\n);\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo7/demo7.jsx\n **/","module.exports = \"var React = require(\\\"react\\\");\\n\\n// Sometimes it's useful have a component that can\\n// wrap other arbitrary ReactElements. React provides\\n// `this.props.children` for this purpose.\\n//\\n// For example, given the following JSX:\\n//\\n//   <Component>Inner <strong>text</strong></Component>\\n//\\n// Inside `Component`, `this.props.children` provides:\\n//\\n//   Inner <strong>text</strong>\\n//\\n// In this example, we'll create a component that provides\\n// a code listing with preformatted text and a label for\\n// the filename.\\n\\nvar CodeListing = React.createClass({\\n  propTypes: {\\n    filename: React.PropTypes.string\\n  },\\n\\n  getDefaultProps() {\\n    return {\\n      filename: \\\"unnamed file\\\"\\n    };\\n  },\\n\\n  render() {\\n    var filenameStyle = {\\n      backgroundColor: \\\"black\\\",\\n      color: \\\"white\\\",\\n      padding: 5,\\n      fontFamily: \\\"monospace\\\"\\n    };\\n\\n    return (\\n      <div style={{border: \\\"1px solid black\\\"}}>\\n        <div style={filenameStyle}>{this.props.filename}</div>\\n        <pre style={{margin: 5}}>{this.props.children}</pre>\\n      </div>\\n    );\\n  }\\n});\\n\\nvar Application = React.createClass({\\n  render() {\\n      var code = [\\n        'React.render(',\\n        '  // We pass `\\\"Minerva\\\"` as the `name` property, which is',\\n        '  // used in `HelloComponent`\\\\'s `render` function.',\\n        '  HelloElementFactory({name: \\\"Minerva\\\"}),',\\n        '  document.getElementById(\\\"container\\\")',\\n        ');'\\n      ].join(\\\"\\\\n\\\");\\n\\n    // We simply wrap whatever we want to show up in the code listing\\n    // in a `<CodeListing>` element, and it's provided as\\n    // `this.props.children` in the `CodeListing` component.\\n    return (\\n      <div>\\n        <p>Here is some code:</p>\\n        <CodeListing filename=\\\"simple.jsx\\\">{code}</CodeListing>\\n        <p>And some more:</p>\\n        <CodeListing>CodeListing with no \\\"filename\\\" property</CodeListing>\\n      </div>\\n    );\\n  }\\n});\\n\\nReact.render(\\n  <Application />,\\n  document.getElementById(\\\"container\\\")\\n);\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/raw-loader!./demo7/demo7.jsx\n ** module id = 18\n ** module chunks = 7\n **/"],"sourceRoot":""}