{"version":3,"sources":["webpack:///./demo4/demo4.jsx"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA,mCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,WAAW;AACxC,QAAO;AACP;AACA;AACA;AACA,EAAC;;AAED,mCAAkC;AAClC;AACA;AACA;AACA;AACA,4DAA2D;AAC3D;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,qBAAqB;AACxC,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B,IAAG;;AAEH;AACA;AACA,uBAAsB,wBAAwB;AAC9C,0BAAyB,kEAAkE;AAC3F,0BAAyB,kCAAkC;AAC3D;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA,0BAAyB;AACzB;AACA;AACA;AACA,oBAAmB,iBAAiB;AACpC,IAAG;;AAEH;AACA;AACA;AACA;AACA,mBAAkB,wBAAwB;AAC1C,mBAAkB,4BAA4B;AAC9C;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA","sourcesContent":["/** @jsx React.DOM */\n\nvar React = require(\"react\");\n\nvar TodoList = React.createClass({displayName: 'TodoList',\n  // `TodoList` takes a prop called `items` which is an array of\n  // strings. We can make this requirement \"official\" using propTypes.\n  // If a component doesn't get the properties listed in its\n  // propTypes, it will warn you in the console (if using the dev build).\n  propTypes: {\n    items: React.PropTypes.arrayOf(React.PropTypes.string).isRequired\n  },\n\n  render: function() {\n    // Every component in an array should have a `key` attribute\n    // set so React can uniquely identify the item if it needs\n    // to remove it from the middle of the array without iterating\n    // over every component in the array.\n    // Since our todos can't be reordered, we'll just use the index.\n    return (\n      React.DOM.ul(null, \n      this.props.items.map(function(item, index) {\n        return React.DOM.li({key: index}, item);\n      })\n      )\n    );\n  }\n});\n\nvar TodoForm = React.createClass({displayName: 'TodoForm',\n  // React has PropTypes for most built-in JS types, as well as the\n  // ability to define your own validation functions.\n  //\n  // `TodoForm` requires an `onSubmit` property that we'll use to notify\n  // our parent component that the form has been submitted; this makes\n  // the component more reusable, since the logic for what to do with\n  // the submitted form isn't hardcoded into the `TodoForm` component.\n  propTypes: {\n    onSubmit: React.PropTypes.func.isRequired\n  },\n\n  // `TodoForm` contains a text input with a `value` attribute, which\n  // makes the input a \"controlled\" input. This means that the input\n  // will *always* display whatever is passed to its `value` no matter\n  // what the user tries to type in the box. The `text` property of\n  // our state is the current string to display in the box.\n  getInitialState: function() {\n    return {\n      text: \"\"\n    };\n  },\n\n  // The text input has an `onChange` property, which calls a function\n  // any time the user interacts with the box. Here, we update our\n  // state so the text in the box updates.\n  //\n  // This is necessary because React components' `render` functions should\n  // *always* describe how the component should look at *any* point and time;\n  // if we didn't use a controlled input, the text might reset in certain\n  // re-rendering situations.\n  onTextChange: function(e) {\n    this.setState({text: e.target.value});\n  },\n\n  // The form also has a handler for `onSubmit`..\n  onSubmit: function(e) {\n    e.preventDefault();\n    // ... which we'll use to indicate to our parent that an\n    // item has been submitted...\n    this.props.onSubmit(this.state.text);\n    // ... and then clear the text box.\n    this.setState({text: \"\"});\n  },\n\n  render: function() {\n    return (\n      React.DOM.form({onSubmit: this.onSubmit}, \n        React.DOM.input({type: \"text\", value: this.state.text, onChange: this.onTextChange}), \n        React.DOM.input({type: \"submit\", value: \"Add Todo\"})\n      )\n    );\n  }\n});\n\n// Our `Todos` component is the full application, which very simply composes\n// the `TodoList` an `TodoForm` components.\nvar Todos = React.createClass({displayName: 'Todos',\n  getInitialState: function() {\n    // It owns the actual items array, so the composed `TodoList`\n    // and `TodoForm` can be reused in many contexts (that is, they\n    // are not application specific).\n    return {\n      items: []\n    };\n  },\n\n  // `onSubmitTodo` is the function we pass to `TodoForm`'s\n  // `onSubmit` property; so, it will be called with `TodoForm`\n  // calls `this.props.onSubmit(...)`.\n  onSubmitTodo: function(newTodo) {\n    var nextItems = this.state.items.concat([newTodo]);\n    this.setState({items: nextItems});\n  },\n\n  render: function() {\n    return (\n      React.DOM.div(null, \n        React.DOM.h3(null, \"TODO\"), \n        TodoList({items: this.state.items}), \n        TodoForm({onSubmit: this.onSubmitTodo})\n      )\n    );\n  }\n});\n\nReact.renderComponent(\n  Todos(null),\n  document.getElementById(\"container\")\n);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo4/demo4.jsx\n ** module id = 6\n ** module chunks = 4\n **/"],"sourceRoot":"","file":"4.bundle.js"}