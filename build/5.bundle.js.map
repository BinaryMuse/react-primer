{"version":3,"sources":["webpack:///5.bundle.js","webpack:///./demo5/demo5.jsx"],"names":["webpackJsonp",7,"module","exports","__webpack_require__","React","SetIntervalMixin","componentWillMount","this","intervals","setInterval","push","apply","arguments","componentWillUnmount","forEach","clearInterval","Timer","createClass","displayName","mixins","getInitialState","time","componentDidMount","tick","setState","state","render","DOM","div","renderComponent","document","getElementById"],"mappings":"AAAAA,cAAc,IAERC;;;AAIA,SAASC,EAAQC,EAASC,GCJhC,GAAAC,GAAAD,cAAA,GAUAE,GAGAC,mBAAA,WACAC,KAAAC,cAKAC,YAAA,WACAF,KAAAC,UAAAE,KAAAD,YAAAE,MAAA,KAAAC,aAGAC,qBAAA,WACAN,KAAAC,UAAAM,QAAAC,iBAIAC,EAAAZ,EAAAa,aAA+BC,YAAA,QAC/BC,QAAAd,GAEAe,gBAAA,WACA,OACAC,KAAA,IAMAC,kBAAA,WACAf,KAAAE,YAAAF,KAAAgB,KAAA,MAGAA,KAAA,WACAhB,KAAAiB,UAAmBH,KAAAd,KAAAkB,MAAAJ,KAAA,KAGnBK,OAAA,WACA,MAAAtB,GAAAuB,IAAAC,IAAA,cAAArB,KAAAkB,MAAAJ,QAIAjB,GAAAyB,gBACAb,EAAA,MACAc,SAAAC,eAAA","file":"5.bundle.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 7:\n/*!*************************!*\\\n  !*** ./demo5/demo5.jsx ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @jsx React.DOM */\n\t\n\tvar React = __webpack_require__(/*! react */ 1);\n\t\n\t// While composition is the best technique for using components\n\t// together, sometimes it's desirable to have cross-cutting concerns\n\t// that are shared between multiple components. React uses mixins\n\t// to solve this problem.\n\t\n\t// A mixin is simply an object that defines certain component\n\t// lifecycle hooks and properties. Here's a mixin we'll use\n\t// to reimplement the Timer demo.\n\tvar SetIntervalMixin = {\n\t  // Many lifecycle hooks are automatically merged with the\n\t  // same hook defined in other mixins or the component itself.\n\t  componentWillMount: function() {\n\t    this.intervals = [];\n\t  },\n\t\n\t  // Mixins can also define other methods to make available\n\t  // to the component.\n\t  setInterval: function() {\n\t    this.intervals.push(setInterval.apply(null, arguments));\n\t  },\n\t\n\t  componentWillUnmount: function() {\n\t    this.intervals.forEach(clearInterval);\n\t  }\n\t};\n\t\n\tvar Timer = React.createClass({displayName: 'Timer',\n\t  mixins: [SetIntervalMixin],\n\t\n\t  getInitialState: function() {\n\t    return {\n\t      time: 0\n\t    };\n\t  },\n\t\n\t  // Now we can use the mixin to set the interval without worrying\n\t  // about setting our own `componentWillUnmount` hook.\n\t  componentDidMount: function() {\n\t    this.setInterval(this.tick, 1000);\n\t  },\n\t\n\t  tick: function() {\n\t    this.setState({time: this.state.time + 1});\n\t  },\n\t\n\t  render: function() {\n\t    return React.DOM.div(null, \"Time: \", this.state.time);\n\t  }\n\t});\n\t\n\tReact.renderComponent(\n\t  Timer(null),\n\t  document.getElementById(\"container\")\n\t);\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 5.bundle.js\n **/","/** @jsx React.DOM */\n\nvar React = require(\"react\");\n\n// While composition is the best technique for using components\n// together, sometimes it's desirable to have cross-cutting concerns\n// that are shared between multiple components. React uses mixins\n// to solve this problem.\n\n// A mixin is simply an object that defines certain component\n// lifecycle hooks and properties. Here's a mixin we'll use\n// to reimplement the Timer demo.\nvar SetIntervalMixin = {\n  // Many lifecycle hooks are automatically merged with the\n  // same hook defined in other mixins or the component itself.\n  componentWillMount: function() {\n    this.intervals = [];\n  },\n\n  // Mixins can also define other methods to make available\n  // to the component.\n  setInterval: function() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  },\n\n  componentWillUnmount: function() {\n    this.intervals.forEach(clearInterval);\n  }\n};\n\nvar Timer = React.createClass({displayName: 'Timer',\n  mixins: [SetIntervalMixin],\n\n  getInitialState: function() {\n    return {\n      time: 0\n    };\n  },\n\n  // Now we can use the mixin to set the interval without worrying\n  // about setting our own `componentWillUnmount` hook.\n  componentDidMount: function() {\n    this.setInterval(this.tick, 1000);\n  },\n\n  tick: function() {\n    this.setState({time: this.state.time + 1});\n  },\n\n  render: function() {\n    return React.DOM.div(null, \"Time: \", this.state.time);\n  }\n});\n\nReact.renderComponent(\n  Timer(null),\n  document.getElementById(\"container\")\n);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo5/demo5.jsx\n ** module id = 7\n ** module chunks = 5\n **/"],"sourceRoot":""}