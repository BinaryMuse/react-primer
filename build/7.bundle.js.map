{"version":3,"sources":["webpack:///./demo7/demo7.jsx","webpack:///./demo7/demo7.jsx?39ff"],"names":[],"mappings":";;;;;;;;AAAA,KAAI,KAAK,GAAG,mBAAO,CAAC,cAAO,CAAC,CAAC;;AAE7B,mDAAkD;AAClD,sDAAqD;AACrD,2CAA0C;AAC1C,GAAE;AACF,yCAAwC;AACxC,GAAE;AACF,wDAAuD;AACvD,GAAE;AACF,uDAAsD;AACtD,GAAE;AACF,iCAAgC;AAChC,GAAE;AACF,2DAA0D;AAC1D,yDAAwD;AACxD,iBAAgB;;AAEhB,KAAI,iCAAiC;GACnC,SAAS,EAAE;KACT,QAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AACpC,IAAG;;GAED,eAAe,YAAG,CAAC;KACjB,OAAO;OACL,QAAQ,EAAE,cAAc;MACzB,CAAC;AACN,IAAG;;GAED,MAAM,YAAG,CAAC;KACR,IAAI,aAAa,GAAG;OAClB,eAAe,EAAE,OAAO;OACxB,KAAK,EAAE,OAAO;OACd,OAAO,EAAE,CAAC;OACV,UAAU,EAAE,WAAW;AAC7B,MAAK,CAAC;;KAEF;OACE,yBAAI,IAAC,OAAK,CAAE,CAAC,MAAM,EAAE,iBAAiB,CAAG;SACvC,yBAAI,IAAC,OAAK,CAAE,aAAe,GAAC,IAAI,CAAC,KAAK,CAAC,QAAe;SACtD,yBAAI,IAAC,OAAK,CAAE,CAAC,MAAM,EAAE,CAAC,CAAG,GAAC,IAAI,CAAC,KAAK,CAAC,OAAe;OAChD;OACN;IACH;AACH,EAAC,CAAC,CAAC;;AAEH,KAAI,iCAAiC;GACnC,MAAM,YAAG,CAAC;OACN,IAAI,IAAI,GAAG;SACT,eAAe;SACf,2DAA2D;SAC3D,qDAAqD;SACrD,2CAA2C;SAC3C,wCAAwC;SACxC,IAAI;AACZ,QAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnB;AACA;AACA;;KAEI;OACE,yBAAI,MAAC;SACH,uBAAE,MAAC,sBAAsB;SACzB,oBAAC,WAAW,IAAC,UAAQ,CAAC,YAAa,GAAC,IAAmB;SACvD,uBAAE,MAAC,kBAAkB;SACrB,oBAAC,WAAW,MAAC,6CAAqD;OAC9D;OACN;IACH;AACH,EAAC,CAAC,CAAC;;AAEH,MAAK,CAAC,MAAM;GACV,oBAAC,WAAW,OAAG;GACf,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC;EACrC,CAAC;;;;;;;;;;;AC1EF,kDAAiD,2hBAA2hB,gBAAgB,2CAA2C,0BAA0B,cAAc,0CAA0C,KAAK,iBAAiB,2BAA2B,wHAAwH,qCAAqC,6BAA6B,uBAAuB,cAAc,EAAE,oBAAoB,6BAA6B,WAAW,EAAE,oBAAoB,4BAA4B,KAAK,GAAG,EAAE,yCAAyC,cAAc,yNAAyN,kBAAkB,sEAAsE,yBAAyB,gTAAgT,KAAK,iJAAiJ,KAAK,GAAG,EAAE,mFAAmF,G","sourcesContent":["var React = require(\"react\");\n\n// Sometimes it's useful have a component that can\n// wrap other arbitrary ReactElements. React provides\n// `this.props.children` for this purpose.\n//\n// For example, given the following JSX:\n//\n//   <Component>Inner <strong>text</strong></Component>\n//\n// Inside `Component`, `this.props.children` provides:\n//\n//   Inner <strong>text</strong>\n//\n// In this example, we'll create a component that provides\n// a code listing with preformatted text and a label for\n// the filename.\n\nvar CodeListing = React.createClass({\n  propTypes: {\n    filename: React.PropTypes.string\n  },\n\n  getDefaultProps() {\n    return {\n      filename: \"unnamed file\"\n    };\n  },\n\n  render() {\n    var filenameStyle = {\n      backgroundColor: \"black\",\n      color: \"white\",\n      padding: 5,\n      fontFamily: \"monospace\"\n    };\n\n    return (\n      <div style={{border: \"1px solid black\"}}>\n        <div style={filenameStyle}>{this.props.filename}</div>\n        <pre style={{margin: 5}}>{this.props.children}</pre>\n      </div>\n    );\n  }\n});\n\nvar Application = React.createClass({\n  render() {\n      var code = [\n        'React.render(',\n        '  // We pass `\"Minerva\"` as the `name` property, which is',\n        '  // used in `HelloComponent`\\'s `render` function.',\n        '  HelloElementFactory({name: \"Minerva\"}),',\n        '  document.getElementById(\"container\")',\n        ');'\n      ].join(\"\\n\");\n\n    // We simply wrap whatever we want to show up in the code listing\n    // in a `<CodeListing>` element, and it's provided as\n    // `this.props.children` in the `CodeListing` component.\n    return (\n      <div>\n        <p>Here is some code:</p>\n        <CodeListing filename=\"simple.jsx\">{code}</CodeListing>\n        <p>And some more:</p>\n        <CodeListing>CodeListing with no \"filename\" property</CodeListing>\n      </div>\n    );\n  }\n});\n\nReact.render(\n  <Application />,\n  document.getElementById(\"container\")\n);\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo7/demo7.jsx\n **/","module.exports = \"var React = require(\\\"react\\\");\\n\\n// Sometimes it's useful have a component that can\\n// wrap other arbitrary ReactElements. React provides\\n// `this.props.children` for this purpose.\\n//\\n// For example, given the following JSX:\\n//\\n//   <Component>Inner <strong>text</strong></Component>\\n//\\n// Inside `Component`, `this.props.children` provides:\\n//\\n//   Inner <strong>text</strong>\\n//\\n// In this example, we'll create a component that provides\\n// a code listing with preformatted text and a label for\\n// the filename.\\n\\nvar CodeListing = React.createClass({\\n  propTypes: {\\n    filename: React.PropTypes.string\\n  },\\n\\n  getDefaultProps() {\\n    return {\\n      filename: \\\"unnamed file\\\"\\n    };\\n  },\\n\\n  render() {\\n    var filenameStyle = {\\n      backgroundColor: \\\"black\\\",\\n      color: \\\"white\\\",\\n      padding: 5,\\n      fontFamily: \\\"monospace\\\"\\n    };\\n\\n    return (\\n      <div style={{border: \\\"1px solid black\\\"}}>\\n        <div style={filenameStyle}>{this.props.filename}</div>\\n        <pre style={{margin: 5}}>{this.props.children}</pre>\\n      </div>\\n    );\\n  }\\n});\\n\\nvar Application = React.createClass({\\n  render() {\\n      var code = [\\n        'React.render(',\\n        '  // We pass `\\\"Minerva\\\"` as the `name` property, which is',\\n        '  // used in `HelloComponent`\\\\'s `render` function.',\\n        '  HelloElementFactory({name: \\\"Minerva\\\"}),',\\n        '  document.getElementById(\\\"container\\\")',\\n        ');'\\n      ].join(\\\"\\\\n\\\");\\n\\n    // We simply wrap whatever we want to show up in the code listing\\n    // in a `<CodeListing>` element, and it's provided as\\n    // `this.props.children` in the `CodeListing` component.\\n    return (\\n      <div>\\n        <p>Here is some code:</p>\\n        <CodeListing filename=\\\"simple.jsx\\\">{code}</CodeListing>\\n        <p>And some more:</p>\\n        <CodeListing>CodeListing with no \\\"filename\\\" property</CodeListing>\\n      </div>\\n    );\\n  }\\n});\\n\\nReact.render(\\n  <Application />,\\n  document.getElementById(\\\"container\\\")\\n);\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/raw-loader!./demo7/demo7.jsx\n ** module id = 18\n ** module chunks = 7\n **/"],"sourceRoot":"","file":"7.bundle.js"}