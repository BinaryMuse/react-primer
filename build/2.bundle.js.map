{"version":3,"sources":["webpack:///./demo2/demo2.jsx"],"names":[],"mappings":";;;;;;;;AAAA,yEAAwE;;AAExE,KAAI,KAAK,GAAG,mBAAO,CAAC,cAAO,CAAC,CAAC;;AAE7B,0DAAyD;AACzD,4DAA2D;AAC3D,wDAAuD;AACvD,wBAAuB;AACvB,KAAI,oCAAoC;AACxC;;AAEA,GAAE,MAAM,YAAG,CAAC;AACZ;;KAEI,OAAO,yBAAI,MAAC,YAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAC,4BAAO,MAAC,KAAU,CAAM,EAAC;IAC7D;AACH,EAAC,CAAC,CAAC;;AAEH,MAAK,CAAC,MAAM;;GAEV,oBAAC,cAAc,IAAC,MAAI,CAAC,SAAS,CAAG;GACjC,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC;AACtC,EAAC,CAAC;;AAEF,uDAAsD;AACtD,8DAA6D;AAC7D,oEAAmE","sourcesContent":["// JSX is an XML-like syntax that simplifies composing React components.\n\nvar React = require(\"react\");\n\n// When using JSX, you don't have to worry about creating\n// ReactElements or factories to generate them. JSX handles\n// all these details for you. This demo is functionally\n// identical to Demo 1.\nvar HelloComponent = React.createClass({\n  // The JSX transpiler also supports (optional) ES6 features,\n  // such as concise method syntax, which we're using here.\n  render() {\n    // Children are composed just like child XML/HTML nodes.\n    // `{...}` can be used to interpolate raw JavaScript.\n    return <div>Hello {this.props.name}<strong>!</strong></div>;\n  }\n});\n\nReact.render(\n  // Properties look like HTML attributes.\n  <HelloComponent name=\"Minerva\" />,\n  document.getElementById(\"container\")\n);\n\n// It's worth noting that JSX assumes all calls with a\n// <lowercaseInitialLetter> refers to an actual HTML element,\n// and all custom components must have an <UppercaseInitialLetter>.\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo2/demo2.jsx\n **/"],"sourceRoot":"","file":"2.bundle.js"}