{"version":3,"sources":["webpack:///./demo5/demo5.jsx","webpack:///./demo5/demo5.jsx?b0b1"],"names":[],"mappings":";;;;;;;;AAAA,KAAI,KAAK,GAAG,mBAAO,CAAC,cAAO,CAAC,CAAC;;AAE7B,gEAA+D;AAC/D,qEAAoE;AACpE,kEAAiE;AACjE,0BAAyB;;AAEzB,8DAA6D;AAC7D,4DAA2D;AAC3D,kCAAiC;AACjC,KAAI,gBAAgB,GAAG;AACvB;;GAEE,kBAAkB,YAAG,CAAC;KACpB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACxB,IAAG;AACH;AACA;;GAEE,WAAW,YAAG,CAAC;KACb,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;AAC5D,IAAG;;GAED,oBAAoB,YAAG,CAAC;KACtB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACvC;AACH,EAAC,CAAC;;AAEF,KAAI,2BAA2B;;AAE/B,GAAE,MAAM,EAAE,CAAC,gBAAgB,CAAC;;GAE1B,eAAe,YAAG,CAAC;KACjB,OAAO;OACL,IAAI,EAAE,CAAC;MACR,CAAC;AACN,IAAG;AACH;AACA;;GAEE,iBAAiB,YAAG,CAAC;KACnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACtC,IAAG;;GAED,IAAI,YAAG,CAAC;KACN,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/C,IAAG;;GAED,MAAM,YAAG,CAAC;KACR,OAAO,yBAAI,MAAC,YAAO,IAAI,CAAC,KAAK,CAAC,IAAW,EAAC;IAC3C;AACH,EAAC,CAAC,CAAC;;AAEH,MAAK,CAAC,MAAM;GACV,oBAAC,KAAK,OAAG;GACT,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC;EACrC,CAAC;;;;;;;;;;;ACxDF,kDAAiD,kaAAka,wJAAwJ,0BAA0B,KAAK,2GAA2G,8DAA8D,KAAK,+BAA+B,4CAA4C,KAAK,IAAI,mCAAmC,8HAA8H,cAAc,uBAAuB,KAAK,yJAAyJ,wCAAwC,KAAK,eAAe,qBAAqB,0BAA0B,EAAE,KAAK,iBAAiB,yBAAyB,gBAAgB,OAAO,KAAK,GAAG,EAAE,6EAA6E,G","sourcesContent":["var React = require(\"react\");\n\n// While composition is the best technique for using components\n// together, sometimes it's desirable to have cross-cutting concerns\n// that are shared between multiple components. React uses mixins\n// to solve this problem.\n\n// A mixin is simply an object that defines certain component\n// lifecycle hooks and properties. Here's a mixin we'll use\n// to reimplement the Timer demo.\nvar SetIntervalMixin = {\n  // Many lifecycle hooks are automatically merged with the\n  // same hook defined in other mixins or the component itself.\n  componentWillMount() {\n    this.intervals = [];\n  },\n\n  // Mixins can also define other methods to make available\n  // to the component.\n  setInterval() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  },\n\n  componentWillUnmount() {\n    this.intervals.forEach(clearInterval);\n  }\n};\n\nvar Timer = React.createClass({\n  // Use a mixin by adding it to the `mixins` array for a component.\n  mixins: [SetIntervalMixin],\n\n  getInitialState() {\n    return {\n      time: 0\n    };\n  },\n\n  // Now we can use the mixin to set the interval without worrying\n  // about setting our own `componentWillUnmount` hook.\n  componentDidMount() {\n    this.setInterval(this.tick, 1000);\n  },\n\n  tick() {\n    this.setState({time: this.state.time + 1});\n  },\n\n  render() {\n    return <div>Time: {this.state.time}</div>;\n  }\n});\n\nReact.render(\n  <Timer />,\n  document.getElementById(\"container\")\n);\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo5/demo5.jsx\n **/","module.exports = \"var React = require(\\\"react\\\");\\n\\n// While composition is the best technique for using components\\n// together, sometimes it's desirable to have cross-cutting concerns\\n// that are shared between multiple components. React uses mixins\\n// to solve this problem.\\n\\n// A mixin is simply an object that defines certain component\\n// lifecycle hooks and properties. Here's a mixin we'll use\\n// to reimplement the Timer demo.\\nvar SetIntervalMixin = {\\n  // Many lifecycle hooks are automatically merged with the\\n  // same hook defined in other mixins or the component itself.\\n  componentWillMount() {\\n    this.intervals = [];\\n  },\\n\\n  // Mixins can also define other methods to make available\\n  // to the component.\\n  setInterval() {\\n    this.intervals.push(setInterval.apply(null, arguments));\\n  },\\n\\n  componentWillUnmount() {\\n    this.intervals.forEach(clearInterval);\\n  }\\n};\\n\\nvar Timer = React.createClass({\\n  // Use a mixin by adding it to the `mixins` array for a component.\\n  mixins: [SetIntervalMixin],\\n\\n  getInitialState() {\\n    return {\\n      time: 0\\n    };\\n  },\\n\\n  // Now we can use the mixin to set the interval without worrying\\n  // about setting our own `componentWillUnmount` hook.\\n  componentDidMount() {\\n    this.setInterval(this.tick, 1000);\\n  },\\n\\n  tick() {\\n    this.setState({time: this.state.time + 1});\\n  },\\n\\n  render() {\\n    return <div>Time: {this.state.time}</div>;\\n  }\\n});\\n\\nReact.render(\\n  <Timer />,\\n  document.getElementById(\\\"container\\\")\\n);\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/raw-loader!./demo5/demo5.jsx\n ** module id = 14\n ** module chunks = 5\n **/"],"sourceRoot":"","file":"5.bundle.js"}