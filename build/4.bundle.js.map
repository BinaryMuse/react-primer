{"version":3,"sources":["webpack:///4.bundle.js","webpack:///./demo4/demo4.jsx"],"names":["webpackJsonp",6,"module","exports","__webpack_require__","React","TodoList","createClass","displayName","propTypes","items","PropTypes","arrayOf","string","isRequired","render","DOM","ul","this","props","map","item","index","li","key","TodoForm","onSubmit","func","getInitialState","text","onTextChange","e","setState","target","value","preventDefault","state","form","input","type","onChange","Todos","onSubmitTodo","newTodo","nextItems","concat","div","h3","renderComponent","document","getElementById"],"mappings":"AAAAA,cAAc,IAERC;;;AAIA,SAASC,EAAQC,EAASC,GCJhC,GAAAC,GAAAD,cAAA,GAEAE,EAAAD,EAAAE,aAAkCC,YAAA,WAKlCC,WACAC,MAAAL,EAAAM,UAAAC,QAAAP,EAAAM,UAAAE,QAAAC,YAGAC,OAAA,WAMA,MACAV,GAAAW,IAAAC,GAAA,KACAC,KAAAC,MAAAT,MAAAU,IAAA,SAAAC,EAAAC,GACA,MAAAjB,GAAAW,IAAAO,IAA6BC,IAAAF,GAAWD,SAOxCI,EAAApB,EAAAE,aAAkCC,YAAA,WAQlCC,WACAiB,SAAArB,EAAAM,UAAAgB,KAAAb,YAQAc,gBAAA,WACA,OACAC,KAAA,KAYAC,aAAA,SAAAC,GACAb,KAAAc,UAAmBH,KAAAE,EAAAE,OAAAC,SAInBR,SAAA,SAAAK,GACAA,EAAAI,iBAGAjB,KAAAC,MAAAO,SAAAR,KAAAkB,MAAAP,MAEAX,KAAAc,UAAmBH,KAAA,MAGnBd,OAAA,WACA,MACAV,GAAAW,IAAAqB,MAAsBX,SAAAR,KAAAQ,UACtBrB,EAAAW,IAAAsB,OAAyBC,KAAA,OAAAL,MAAAhB,KAAAkB,MAAAP,KAAAW,SAAAtB,KAAAY,eACzBzB,EAAAW,IAAAsB,OAAyBC,KAAA,SAAAL,MAAA,iBAQzBO,EAAApC,EAAAE,aAA+BC,YAAA,QAC/BoB,gBAAA,WAIA,OACAlB,WAOAgC,aAAA,SAAAC,GACA,GAAAC,GAAA1B,KAAAkB,MAAA1B,MAAAmC,QAAAF,GACAzB,MAAAc,UAAmBtB,MAAAkC,KAGnB7B,OAAA,WACA,MACAV,GAAAW,IAAA8B,IAAA,KACAzC,EAAAW,IAAA+B,GAAA,aACAzC,GAAkBI,MAAAQ,KAAAkB,MAAA1B,QAClBe,GAAkBC,SAAAR,KAAAwB,kBAMlBrC,GAAA2C,gBACAP,EAAA,MACAQ,SAAAC,eAAA","file":"4.bundle.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 6:\n/*!*************************!*\\\n  !*** ./demo4/demo4.jsx ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @jsx React.DOM */\n\t\n\tvar React = __webpack_require__(/*! react */ 1);\n\t\n\tvar TodoList = React.createClass({displayName: 'TodoList',\n\t  // `TodoList` takes a prop called `items` which is an array of\n\t  // strings. We can make this requirement \"official\" using propTypes.\n\t  // If a component doesn't get the properties listed in its\n\t  // propTypes, it will warn you in the console (if using the dev build).\n\t  propTypes: {\n\t    items: React.PropTypes.arrayOf(React.PropTypes.string).isRequired\n\t  },\n\t\n\t  render: function() {\n\t    // Every component in an array should have a `key` attribute\n\t    // set so React can uniquely identify the item if it needs\n\t    // to remove it from the middle of the array without iterating\n\t    // over every component in the array.\n\t    // Since our todos can't be reordered, we'll just use the index.\n\t    return (\n\t      React.DOM.ul(null, \n\t      this.props.items.map(function(item, index) {\n\t        return React.DOM.li({key: index}, item);\n\t      })\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tvar TodoForm = React.createClass({displayName: 'TodoForm',\n\t  // React has PropTypes for most built-in JS types, as well as the\n\t  // ability to define your own validation functions.\n\t  //\n\t  // `TodoForm` requires an `onSubmit` property that we'll use to notify\n\t  // our parent component that the form has been submitted; this makes\n\t  // the component more reusable, since the logic for what to do with\n\t  // the submitted form isn't hardcoded into the `TodoForm` component.\n\t  propTypes: {\n\t    onSubmit: React.PropTypes.func.isRequired\n\t  },\n\t\n\t  // `TodoForm` contains a text input with a `value` attribute, which\n\t  // makes the input a \"controlled\" input. This means that the input\n\t  // will *always* display whatever is passed to its `value` no matter\n\t  // what the user tries to type in the box. The `text` property of\n\t  // our state is the current string to display in the box.\n\t  getInitialState: function() {\n\t    return {\n\t      text: \"\"\n\t    };\n\t  },\n\t\n\t  // The text input has an `onChange` property, which calls a function\n\t  // any time the user interacts with the box. Here, we update our\n\t  // state so the text in the box updates.\n\t  //\n\t  // This is necessary because React components' `render` functions should\n\t  // *always* describe how the component should look at *any* point and time;\n\t  // if we didn't use a controlled input, the text might reset in certain\n\t  // re-rendering situations.\n\t  onTextChange: function(e) {\n\t    this.setState({text: e.target.value});\n\t  },\n\t\n\t  // The form also has a handler for `onSubmit`...\n\t  onSubmit: function(e) {\n\t    e.preventDefault();\n\t    // ... which we'll use to indicate to our parent that an\n\t    // item has been submitted...\n\t    this.props.onSubmit(this.state.text);\n\t    // ... and then clear the text box.\n\t    this.setState({text: \"\"});\n\t  },\n\t\n\t  render: function() {\n\t    return (\n\t      React.DOM.form({onSubmit: this.onSubmit}, \n\t        React.DOM.input({type: \"text\", value: this.state.text, onChange: this.onTextChange}), \n\t        React.DOM.input({type: \"submit\", value: \"Add Todo\"})\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\t// Our `Todos` component is the full application, which very simply composes\n\t// the `TodoList` an `TodoForm` components.\n\tvar Todos = React.createClass({displayName: 'Todos',\n\t  getInitialState: function() {\n\t    // It owns the actual items array, so the composed `TodoList`\n\t    // and `TodoForm` can be reused in many contexts (that is, they\n\t    // are not application specific).\n\t    return {\n\t      items: []\n\t    };\n\t  },\n\t\n\t  // `onSubmitTodo` is the function we pass to `TodoForm`'s\n\t  // `onSubmit` property; so, it will be called when `TodoForm`\n\t  // calls `this.props.onSubmit(...)`.\n\t  onSubmitTodo: function(newTodo) {\n\t    var nextItems = this.state.items.concat([newTodo]);\n\t    this.setState({items: nextItems});\n\t  },\n\t\n\t  render: function() {\n\t    return (\n\t      React.DOM.div(null, \n\t        React.DOM.h3(null, \"TODO\"), \n\t        TodoList({items: this.state.items}), \n\t        TodoForm({onSubmit: this.onSubmitTodo})\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tReact.renderComponent(\n\t  Todos(null),\n\t  document.getElementById(\"container\")\n\t);\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 4.bundle.js\n **/","/** @jsx React.DOM */\n\nvar React = require(\"react\");\n\nvar TodoList = React.createClass({displayName: 'TodoList',\n  // `TodoList` takes a prop called `items` which is an array of\n  // strings. We can make this requirement \"official\" using propTypes.\n  // If a component doesn't get the properties listed in its\n  // propTypes, it will warn you in the console (if using the dev build).\n  propTypes: {\n    items: React.PropTypes.arrayOf(React.PropTypes.string).isRequired\n  },\n\n  render: function() {\n    // Every component in an array should have a `key` attribute\n    // set so React can uniquely identify the item if it needs\n    // to remove it from the middle of the array without iterating\n    // over every component in the array.\n    // Since our todos can't be reordered, we'll just use the index.\n    return (\n      React.DOM.ul(null, \n      this.props.items.map(function(item, index) {\n        return React.DOM.li({key: index}, item);\n      })\n      )\n    );\n  }\n});\n\nvar TodoForm = React.createClass({displayName: 'TodoForm',\n  // React has PropTypes for most built-in JS types, as well as the\n  // ability to define your own validation functions.\n  //\n  // `TodoForm` requires an `onSubmit` property that we'll use to notify\n  // our parent component that the form has been submitted; this makes\n  // the component more reusable, since the logic for what to do with\n  // the submitted form isn't hardcoded into the `TodoForm` component.\n  propTypes: {\n    onSubmit: React.PropTypes.func.isRequired\n  },\n\n  // `TodoForm` contains a text input with a `value` attribute, which\n  // makes the input a \"controlled\" input. This means that the input\n  // will *always* display whatever is passed to its `value` no matter\n  // what the user tries to type in the box. The `text` property of\n  // our state is the current string to display in the box.\n  getInitialState: function() {\n    return {\n      text: \"\"\n    };\n  },\n\n  // The text input has an `onChange` property, which calls a function\n  // any time the user interacts with the box. Here, we update our\n  // state so the text in the box updates.\n  //\n  // This is necessary because React components' `render` functions should\n  // *always* describe how the component should look at *any* point and time;\n  // if we didn't use a controlled input, the text might reset in certain\n  // re-rendering situations.\n  onTextChange: function(e) {\n    this.setState({text: e.target.value});\n  },\n\n  // The form also has a handler for `onSubmit`...\n  onSubmit: function(e) {\n    e.preventDefault();\n    // ... which we'll use to indicate to our parent that an\n    // item has been submitted...\n    this.props.onSubmit(this.state.text);\n    // ... and then clear the text box.\n    this.setState({text: \"\"});\n  },\n\n  render: function() {\n    return (\n      React.DOM.form({onSubmit: this.onSubmit}, \n        React.DOM.input({type: \"text\", value: this.state.text, onChange: this.onTextChange}), \n        React.DOM.input({type: \"submit\", value: \"Add Todo\"})\n      )\n    );\n  }\n});\n\n// Our `Todos` component is the full application, which very simply composes\n// the `TodoList` an `TodoForm` components.\nvar Todos = React.createClass({displayName: 'Todos',\n  getInitialState: function() {\n    // It owns the actual items array, so the composed `TodoList`\n    // and `TodoForm` can be reused in many contexts (that is, they\n    // are not application specific).\n    return {\n      items: []\n    };\n  },\n\n  // `onSubmitTodo` is the function we pass to `TodoForm`'s\n  // `onSubmit` property; so, it will be called when `TodoForm`\n  // calls `this.props.onSubmit(...)`.\n  onSubmitTodo: function(newTodo) {\n    var nextItems = this.state.items.concat([newTodo]);\n    this.setState({items: nextItems});\n  },\n\n  render: function() {\n    return (\n      React.DOM.div(null, \n        React.DOM.h3(null, \"TODO\"), \n        TodoList({items: this.state.items}), \n        TodoForm({onSubmit: this.onSubmitTodo})\n      )\n    );\n  }\n});\n\nReact.renderComponent(\n  Todos(null),\n  document.getElementById(\"container\")\n);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo4/demo4.jsx\n ** module id = 6\n ** module chunks = 4\n **/"],"sourceRoot":""}