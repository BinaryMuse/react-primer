{"version":3,"sources":["webpack:///2.bundle.js","webpack:///./demo2/demo2.jsx"],"names":["webpackJsonp",4,"module","exports","__webpack_require__","React","Hello","createClass","displayName","render","DOM","div","this","props","name","strong","renderComponent","document","getElementById"],"mappings":"AAAAA,cAAc,IAERC;;;AAIA,SAASC,EAAQC,EAASC,GCAhC,GAAAC,GAAAD,cAAA,GAEAE,EAAAD,EAAAE,aAA+BC,YAAA,QAC/BC,OAAA,WAGA,MAAAJ,GAAAK,IAAAC,IAAA,cAAAC,KAAAC,MAAAC,KAAAT,EAAAK,IAAAK,OAAA,aAIAV,GAAAW,gBAEAV,GAASQ,KAAA,YACTG,SAAAC,eAAA","file":"2.bundle.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 4:\n/*!*************************!*\\\n  !*** ./demo2/demo2.jsx ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @jsx React.DOM */\n\t\n\t// JSX is an XML-like syntax that simplifies composing React\n\t// components. The @jsx pragma is required at the top of the\n\t// file to tell React where the default HTML components live.\n\t\n\tvar React = __webpack_require__(/*! react */ 1);\n\t\n\tvar Hello = React.createClass({displayName: 'Hello',\n\t  render: function() {\n\t    // Children are composed just like child XML/HTML nodes.\n\t    // `{...}` can be used to interpolate raw JavaScript.\n\t    return React.DOM.div(null, \"Hello \", this.props.name, React.DOM.strong(null, \"!\"));\n\t  }\n\t});\n\t\n\tReact.renderComponent(\n\t  // Properties look like HTML attributes.\n\t  Hello({name: \"Minerva\"}),\n\t  document.getElementById(\"container\")\n\t);\n\t\n\t// JSX compiles directly to JavaScript functions.\n\t// That is to say,\n\t//\n\t//   <Component prop={this.props.name}>\n\t//     <strong>Hello</strong>\n\t//   </Component>\n\t//\n\t// is exactly the same as\n\t//\n\t//   Component({prop: this.props.name},\n\t//     React.DOM.strong(null, \"Hello\")\n\t//   )\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 2.bundle.js\n **/","/** @jsx React.DOM */\n\n// JSX is an XML-like syntax that simplifies composing React\n// components. The @jsx pragma is required at the top of the\n// file to tell React where the default HTML components live.\n\nvar React = require(\"react\");\n\nvar Hello = React.createClass({displayName: 'Hello',\n  render: function() {\n    // Children are composed just like child XML/HTML nodes.\n    // `{...}` can be used to interpolate raw JavaScript.\n    return React.DOM.div(null, \"Hello \", this.props.name, React.DOM.strong(null, \"!\"));\n  }\n});\n\nReact.renderComponent(\n  // Properties look like HTML attributes.\n  Hello({name: \"Minerva\"}),\n  document.getElementById(\"container\")\n);\n\n// JSX compiles directly to JavaScript functions.\n// That is to say,\n//\n//   <Component prop={this.props.name}>\n//     <strong>Hello</strong>\n//   </Component>\n//\n// is exactly the same as\n//\n//   Component({prop: this.props.name},\n//     React.DOM.strong(null, \"Hello\")\n//   )\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo2/demo2.jsx\n ** module id = 4\n ** module chunks = 2\n **/"],"sourceRoot":""}