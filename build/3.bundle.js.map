{"version":3,"sources":["webpack:///3.bundle.js","webpack:///./demo3/demo3.jsx"],"names":["webpackJsonp",5,"module","exports","__webpack_require__","React","Timer","createClass","displayName","getInitialState","time","componentDidMount","this","timer","setInterval","tick","componentWillUnmount","clearInterval","setState","state","render","DOM","div","renderComponent","document","getElementById"],"mappings":"AAAAA,cAAc,IAERC;;;AAIA,SAASC,EAAQC,EAASC,GCJhC,GAAAC,GAAAD,cAAA,GAEAE,EAAAD,EAAAE,aAA+BC,YAAA,QAK/BC,gBAAA,WACA,OACAC,KAAA,IAOAC,kBAAA,WACAC,KAAAC,MAAAC,YAAAF,KAAAG,KAAA,MAMAC,qBAAA,WACAJ,KAAAC,OAAAI,cAAAL,KAAAC,QAYAE,KAAA,WACAH,KAAAM,UAAmBR,KAAAE,KAAAO,MAAAT,KAAA,KAMnBU,OAAA,WACA,MAAAf,GAAAgB,IAAAC,IAAA,cAAAV,KAAAO,MAAAT,QAIAL,GAAAkB,gBACAjB,EAAA,MACAkB,SAAAC,eAAA","file":"3.bundle.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 5:\n/*!*************************!*\\\n  !*** ./demo3/demo3.jsx ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @jsx React.DOM */\n\t\n\tvar React = __webpack_require__(/*! react */ 1);\n\t\n\tvar Timer = React.createClass({displayName: 'Timer',\n\t  // In addition to properties passed from parents, React\n\t  // components can also contain an internal state, referenced\n\t  // by `this.state`. `getInitialState` defines `this.state`\n\t  // when the component is first mounted.\n\t  getInitialState: function() {\n\t    return {\n\t      time: 0\n\t    };\n\t  },\n\t\n\t  // React provides lifecycle hooks to set up and tear\n\t  // down components and third-party APIs if necessary.\n\t  // Here, we start a timer when the component mounts...\n\t  componentDidMount: function() {\n\t    this.timer = setInterval(this.tick, 1000);\n\t  },\n\t\n\t  // ... and remove the timer when the component unmounts.\n\t  // If we don't do this, we'll leak memory (and the timer\n\t  // will continue to fire).\n\t  componentWillUnmount: function() {\n\t    this.timer && clearInterval(this.timer);\n\t  },\n\t\n\t  // Unlike properties, state is owned by the component, and\n\t  // can be changed using a few methods. Note that you should\n\t  // *never* modify `this.state` directly--always use an API\n\t  // method to mutate the state.\n\t  //\n\t  // Our timer calls `setState`, which allows us to update one or\n\t  // more keys in our state. The object passed to `setState` is\n\t  // merged with the current state; we can use `replaceState` instead\n\t  // if we don't want to merge.\n\t  tick: function() {\n\t    this.setState({time: this.state.time + 1});\n\t  },\n\t\n\t  // Render is called automatically when a component's state is\n\t  // updated with `setState`, `replaceState`, or when `forceUpdate`\n\t  // is called. Composed components are automatically re-rendered.\n\t  render: function() {\n\t    return React.DOM.div(null, \"Time: \", this.state.time);\n\t  }\n\t});\n\t\n\tReact.renderComponent(\n\t  Timer(null),\n\t  document.getElementById(\"container\")\n\t);\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 3.bundle.js\n **/","/** @jsx React.DOM */\n\nvar React = require(\"react\");\n\nvar Timer = React.createClass({displayName: 'Timer',\n  // In addition to properties passed from parents, React\n  // components can also contain an internal state, referenced\n  // by `this.state`. `getInitialState` defines `this.state`\n  // when the component is first mounted.\n  getInitialState: function() {\n    return {\n      time: 0\n    };\n  },\n\n  // React provides lifecycle hooks to set up and tear\n  // down components and third-party APIs if necessary.\n  // Here, we start a timer when the component mounts...\n  componentDidMount: function() {\n    this.timer = setInterval(this.tick, 1000);\n  },\n\n  // ... and remove the timer when the component unmounts.\n  // If we don't do this, we'll leak memory (and the timer\n  // will continue to fire).\n  componentWillUnmount: function() {\n    this.timer && clearInterval(this.timer);\n  },\n\n  // Unlike properties, state is owned by the component, and\n  // can be changed using a few methods. Note that you should\n  // *never* modify `this.state` directly--always use an API\n  // method to mutate the state.\n  //\n  // Our timer calls `setState`, which allows us to update one or\n  // more keys in our state. The object passed to `setState` is\n  // merged with the current state; we can use `replaceState` instead\n  // if we don't want to merge.\n  tick: function() {\n    this.setState({time: this.state.time + 1});\n  },\n\n  // Render is called automatically when a component's state is\n  // updated with `setState`, `replaceState`, or when `forceUpdate`\n  // is called. Composed components are automatically re-rendered.\n  render: function() {\n    return React.DOM.div(null, \"Time: \", this.state.time);\n  }\n});\n\nReact.renderComponent(\n  Timer(null),\n  document.getElementById(\"container\")\n);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo3/demo3.jsx\n ** module id = 5\n ** module chunks = 3\n **/"],"sourceRoot":""}