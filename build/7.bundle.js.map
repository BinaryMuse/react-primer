{"version":3,"sources":["webpack:///./demo7/demo7.jsx"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAqC;AACrC;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB,QAAQ,2BAA2B;AACxD,wBAAuB,qBAAqB;AAC5C,wBAAuB,QAAQ,WAAW;AAC1C;AACA;AACA;AACA,EAAC;;AAED,sCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,mBAAkB,gBAAgB;AAClC;AACA,YAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA","sourcesContent":["/** @jsx React.DOM */\n\nvar React = require(\"react\");\n\n// Sometimes it's useful have a component that can\n// wrap other arbitrary components. React provides\n// `this.props.children` for this purpose.\n//\n// For example, given the following JSX:\n//\n//   <Component>Inner <strong>text</strong></Component>\n//\n// Inside `Component`, `this.props.children` provides:\n//\n//   Inner <strong>text</strong>\n//\n// In this example, we'll create a component that provides\n// a code listing with preformatted text and a label for\n// the filename.\n\nvar CodeListing = React.createClass({displayName: 'CodeListing',\n  propTypes: {\n    filename: React.PropTypes.string\n  },\n\n  getDefaultProps: function() {\n    return {\n      filename: \"unnamed file\"\n    };\n  },\n\n  render: function() {\n    var filenameStyle = {\n      backgroundColor: \"black\",\n      color: \"white\",\n      padding: 5,\n      fontFamily: \"monospace\"\n    };\n\n    return (\n      React.DOM.div({style: {border: \"1px solid black\"}}, \n        React.DOM.div({style: filenameStyle}, this.props.filename), \n        React.DOM.pre({style: {margin: 5}}, this.props.children)\n      )\n    );\n  }\n});\n\nvar Application = React.createClass({displayName: 'Application',\n  render: function() {\n      var code = [\n        'React.renderComponent(',\n        '  // We pass `\"Minerva\"` as the `name` property, which is',\n        '  // used in `Hello`\\'s `render` function.',\n        '  Hello({name: \"Minerva\"}),',\n        '  document.getElementById(\"container\")',\n        ');'\n      ].join(\"\\n\");\n\n    // We simply wrap whatever we want to show up in the code listing\n    // in a `<CodeListing>` component, and it's provided as\n    // `this.props.children` in the `CodeListing` component.\n    return (\n      React.DOM.div(null, \n        React.DOM.p(null, \"Here is some code:\"), \n        CodeListing({filename: \"simple.jsx\"}, code), \n        React.DOM.p(null, \"And some more:\"), \n        CodeListing(null, \"CodeListing with no \\\"filename\\\" property\")\n      )\n    );\n  }\n});\n\nReact.renderComponent(\n  Application(null),\n  document.getElementById(\"container\")\n);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo7/demo7.jsx\n ** module id = 9\n ** module chunks = 7\n **/"],"sourceRoot":"","file":"7.bundle.js"}