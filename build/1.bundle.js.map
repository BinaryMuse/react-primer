{"version":3,"sources":["webpack:///1.bundle.js","webpack:///./demo1/demo1.jsx","webpack:///./demo1/demo1.jsx?9f79"],"names":["webpackJsonp",3,"module","exports","__webpack_require__","React","HelloComponent","createClass","displayName","render","DOM","div","this","props","name","strong","HelloElementFactory","createFactory","document","getElementById",10],"mappings":"AAAAA,cAAc,IAERC;;;AAIA,SAASC,EAAQC,EAASC,GCNhC,GAAIC,GAAQD,cAAQ,GAOhBE,EAAAD,EAAAE,aAAoCC,YAAA,iBAWtCC,OAAQ,WASN,MAAOJ,GAAMK,IAAIC,IAAI,KAAM,SAAUC,KAAKC,MAAMC,KAC9CT,EAAMK,IAAIK,OAAO,KAAM,SAKzBC,EAAsBX,EAAMY,cAAcX,EAY9CD,GAAMI,OAGJO,GAAqBF,KAAM,YAC3BI,SAASC,eAAe,eDcpBC;;;AAIA,SAASlB,GEnEfA,EAAAC,QAAA","file":"1.bundle.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 3:\n/*!*************************!*\\\n  !*** ./demo1/demo1.jsx ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar React = __webpack_require__(/*! react */ 1);\n\t\n\t// Create a ReactComponent class with `React.createClass`. Pass the\n\t// class to `React.createFactory` to create a function that, when\n\t// called, creates a `ReactElement` object with that type.\n\t// React uses ReactElements to create a virtual DOM that determines\n\t// how the real DOM should look and behave.\n\tvar HelloComponent = React.createClass({displayName: 'HelloComponent',\n\t  // Every component needs a `render` function that returns a\n\t  // ReactNode. A ReactNode is either:\n\t  //\n\t  //  * a ReactElement\n\t  //  * a string (aka ReactText)\n\t  //  * a number (aka ReactText)\n\t  //  * an array of ReactNodes (aka ReactFragment)\n\t  //\n\t  // ReactElement factories that produce ReactElements that represent\n\t  // native HTML elements can be found on `React.DOM`.\n\t  render: function() {\n\t    // ReactElement factories take a hash of properties as their\n\t    // first argument and their children as remaining arguments.\n\t    // Here, we utilize `this.props`, which is an object\n\t    // containing the properties passed to this component.\n\t    //\n\t    // Properties should be treated as immutable--you should\n\t    // not try to change them from inside a component; they\n\t    // belong to whoever passed them to you!\n\t    return React.DOM.div(null, \"Hello \", this.props.name,\n\t      React.DOM.strong(null, \"!\")\n\t    );\n\t  }\n\t});\n\t\n\tvar HelloElementFactory = React.createFactory(HelloComponent);\n\t// ReactElement factories are just a convenience for creating new\n\t// ReactElements.\n\t//\n\t//     var element = HelloElementFactory(properties, children...)\n\t//\n\t// is the same as\n\t//\n\t//     var element = React.createElement(HelloComponent, properties, children...)\n\t\n\t// We can render a component into a DOM node with `React.render`,\n\t// which takes a ReactElement and a DOM node to render into.\n\tReact.render(\n\t  // We pass `\"Minerva\"` as the `name` property, which is\n\t  // used in `HelloComponent`'s `render` function.\n\t  HelloElementFactory({name: \"Minerva\"}),\n\t  document.getElementById(\"container\")\n\t);\n\n\n/***/ },\n\n/***/ 10:\n/*!****************************************!*\\\n  !*** ./~/raw-loader!./demo1/demo1.jsx ***!\n  \\****************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = \"var React = require(\\\"react\\\");\\n\\n// Create a ReactComponent class with `React.createClass`. Pass the\\n// class to `React.createFactory` to create a function that, when\\n// called, creates a `ReactElement` object with that type.\\n// React uses ReactElements to create a virtual DOM that determines\\n// how the real DOM should look and behave.\\nvar HelloComponent = React.createClass({\\n  // Every component needs a `render` function that returns a\\n  // ReactNode. A ReactNode is either:\\n  //\\n  //  * a ReactElement\\n  //  * a string (aka ReactText)\\n  //  * a number (aka ReactText)\\n  //  * an array of ReactNodes (aka ReactFragment)\\n  //\\n  // ReactElement factories that produce ReactElements that represent\\n  // native HTML elements can be found on `React.DOM`.\\n  render: function() {\\n    // ReactElement factories take a hash of properties as their\\n    // first argument and their children as remaining arguments.\\n    // Here, we utilize `this.props`, which is an object\\n    // containing the properties passed to this component.\\n    //\\n    // Properties should be treated as immutable--you should\\n    // not try to change them from inside a component; they\\n    // belong to whoever passed them to you!\\n    return React.DOM.div(null, \\\"Hello \\\", this.props.name,\\n      React.DOM.strong(null, \\\"!\\\")\\n    );\\n  }\\n});\\n\\nvar HelloElementFactory = React.createFactory(HelloComponent);\\n// ReactElement factories are just a convenience for creating new\\n// ReactElements.\\n//\\n//     var element = HelloElementFactory(properties, children...)\\n//\\n// is the same as\\n//\\n//     var element = React.createElement(HelloComponent, properties, children...)\\n\\n// We can render a component into a DOM node with `React.render`,\\n// which takes a ReactElement and a DOM node to render into.\\nReact.render(\\n  // We pass `\\\"Minerva\\\"` as the `name` property, which is\\n  // used in `HelloComponent`'s `render` function.\\n  HelloElementFactory({name: \\\"Minerva\\\"}),\\n  document.getElementById(\\\"container\\\")\\n);\\n\"\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 1.bundle.js\n **/","var React = require(\"react\");\n\n// Create a ReactComponent class with `React.createClass`. Pass the\n// class to `React.createFactory` to create a function that, when\n// called, creates a `ReactElement` object with that type.\n// React uses ReactElements to create a virtual DOM that determines\n// how the real DOM should look and behave.\nvar HelloComponent = React.createClass({\n  // Every component needs a `render` function that returns a\n  // ReactNode. A ReactNode is either:\n  //\n  //  * a ReactElement\n  //  * a string (aka ReactText)\n  //  * a number (aka ReactText)\n  //  * an array of ReactNodes (aka ReactFragment)\n  //\n  // ReactElement factories that produce ReactElements that represent\n  // native HTML elements can be found on `React.DOM`.\n  render: function() {\n    // ReactElement factories take a hash of properties as their\n    // first argument and their children as remaining arguments.\n    // Here, we utilize `this.props`, which is an object\n    // containing the properties passed to this component.\n    //\n    // Properties should be treated as immutable--you should\n    // not try to change them from inside a component; they\n    // belong to whoever passed them to you!\n    return React.DOM.div(null, \"Hello \", this.props.name,\n      React.DOM.strong(null, \"!\")\n    );\n  }\n});\n\nvar HelloElementFactory = React.createFactory(HelloComponent);\n// ReactElement factories are just a convenience for creating new\n// ReactElements.\n//\n//     var element = HelloElementFactory(properties, children...)\n//\n// is the same as\n//\n//     var element = React.createElement(HelloComponent, properties, children...)\n\n// We can render a component into a DOM node with `React.render`,\n// which takes a ReactElement and a DOM node to render into.\nReact.render(\n  // We pass `\"Minerva\"` as the `name` property, which is\n  // used in `HelloComponent`'s `render` function.\n  HelloElementFactory({name: \"Minerva\"}),\n  document.getElementById(\"container\")\n);\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo1/demo1.jsx\n **/","module.exports = \"var React = require(\\\"react\\\");\\n\\n// Create a ReactComponent class with `React.createClass`. Pass the\\n// class to `React.createFactory` to create a function that, when\\n// called, creates a `ReactElement` object with that type.\\n// React uses ReactElements to create a virtual DOM that determines\\n// how the real DOM should look and behave.\\nvar HelloComponent = React.createClass({\\n  // Every component needs a `render` function that returns a\\n  // ReactNode. A ReactNode is either:\\n  //\\n  //  * a ReactElement\\n  //  * a string (aka ReactText)\\n  //  * a number (aka ReactText)\\n  //  * an array of ReactNodes (aka ReactFragment)\\n  //\\n  // ReactElement factories that produce ReactElements that represent\\n  // native HTML elements can be found on `React.DOM`.\\n  render: function() {\\n    // ReactElement factories take a hash of properties as their\\n    // first argument and their children as remaining arguments.\\n    // Here, we utilize `this.props`, which is an object\\n    // containing the properties passed to this component.\\n    //\\n    // Properties should be treated as immutable--you should\\n    // not try to change them from inside a component; they\\n    // belong to whoever passed them to you!\\n    return React.DOM.div(null, \\\"Hello \\\", this.props.name,\\n      React.DOM.strong(null, \\\"!\\\")\\n    );\\n  }\\n});\\n\\nvar HelloElementFactory = React.createFactory(HelloComponent);\\n// ReactElement factories are just a convenience for creating new\\n// ReactElements.\\n//\\n//     var element = HelloElementFactory(properties, children...)\\n//\\n// is the same as\\n//\\n//     var element = React.createElement(HelloComponent, properties, children...)\\n\\n// We can render a component into a DOM node with `React.render`,\\n// which takes a ReactElement and a DOM node to render into.\\nReact.render(\\n  // We pass `\\\"Minerva\\\"` as the `name` property, which is\\n  // used in `HelloComponent`'s `render` function.\\n  HelloElementFactory({name: \\\"Minerva\\\"}),\\n  document.getElementById(\\\"container\\\")\\n);\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/raw-loader!./demo1/demo1.jsx\n ** module id = 10\n ** module chunks = 1\n **/"],"sourceRoot":""}